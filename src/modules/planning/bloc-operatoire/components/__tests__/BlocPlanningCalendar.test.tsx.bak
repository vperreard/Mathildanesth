import React from 'react';
import { render, screen } from '@testing-library/react';
import { cleanup } from '@testing-library/react';
import BlocPlanningCalendar from '../BlocPlanningCalendar';
import { BlocPeriod } from '../../models/BlocModels';

// Mock fetch
global.fetch = jest.fn(() =>
    Promise.resolve({
        ok: true,
        json: () => Promise.resolve([])
    } as Response)
);

// Mock react-beautiful-dnd
jest.mock('react-beautiful-dnd', () => ({
    DragDropContext: ({ children }: any) => <div>{children}</div>,
    Droppable: ({ children }: any) => <div>{children({ innerRef: jest.fn(), placeholder: null })}</div>,
    Draggable: ({ children }: any) => <div>{children({ innerRef: jest.fn(), draggableProps: {}, dragHandleProps: {} })}</div>
}));

// Mock UI components
jest.mock('@/components/ui', () => ({
    Card: ({ children, ...props }: any) => <div data-testid="card" {...props}>{children}</div>,
    Button: ({ children, onClick, ...props }: any) => <button onClick={onClick} {...props}>{children}</button>
}));

describe('BlocPlanningCalendar', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  afterEach(() => {
    cleanup();
  });

    const defaultProps = {
        date: new Date('2025-01-15'),
        period: BlocPeriod.MORNING,
        onAssignmentChange: jest.fn()
    };

    beforeEach(() => {
    jest.clearAllMocks();
        jest.clearAllMocks();
    });

    it('should render loading state initially', () => {
        render(<BlocPlanningCalendar {...defaultProps} />);
        expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();
    });

    it('should render with different periods', () => {
        const { rerender } = render(<BlocPlanningCalendar {...defaultProps} />);
        expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();

        rerender(<BlocPlanningCalendar {...defaultProps} period={BlocPeriod.AFTERNOON} />);
        expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();

        rerender(<BlocPlanningCalendar {...defaultProps} period={BlocPeriod.ALL_DAY} />);
        expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();
    });

    it('should accept onAssignmentChange callback', () => {
        const mockCallback = jest.fn();
        render(<BlocPlanningCalendar {...defaultProps} onAssignmentChange={mockCallback} />);
        expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();
    });

    it('should handle different dates', () => {
        const testDate = new Date('2025-12-25');
        render(<BlocPlanningCalendar {...defaultProps} date={testDate} />);
        expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();
    });
});
import PublicHolidayService, { publicHolidayService } from '../publicHolidayService';
import apiClient from '@/utils/apiClient';

jest.mock('@/utils/apiClient');
jest.mock('@/lib/prisma', () => ({
  prisma: {
    publicHoliday: {
      findMany: jest.fn(),
    },
  },
}));

describe('PublicHolidayService', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  let service: typeof publicHolidayService;
  let mockApiClient: jest.Mocked<typeof apiClient>;

  beforeEach(() => {
    jest.clearAllMocks();
    jest.clearAllMocks();
    service = PublicHolidayService.getInstance();
    mockApiClient = apiClient as jest.Mocked<typeof apiClient>;

    // Clear cache before each test
    service.invalidateCache();
  });

  describe('getPublicHolidaysForYear', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should return French public holidays for 2024 from API', async () => {
      const mockHolidays = [
        { id: '1', date: '2024-01-01', name: "Jour de l'An", isNational: true, country: 'FR' },
        { id: '2', date: '2024-05-01', name: 'Fête du Travail', isNational: true, country: 'FR' },
        { id: '3', date: '2024-12-25', name: 'Noël', isNational: true, country: 'FR' },
      ];

      mockApiClient.get.mockResolvedValue({ data: mockHolidays });

      const holidays = await service.getPublicHolidaysForYear(2024);

      expect(mockApiClient.get).toHaveBeenCalledWith('/api/jours-feries?year=2024');
      expect(holidays).toEqual(mockHolidays);
    });

    it('should fallback to local calculation when API fails', async () => {
      mockApiClient.get.mockRejectedValue(new Error('API Error'));

      const holidays = await service.getPublicHolidaysForYear(2024);

      expect(holidays.length).toBeGreaterThan(10); // French holidays
      expect(holidays.some(h => h.name === "Jour de l'An")).toBe(true);
      expect(holidays.some(h => h.name === 'Fête du Travail')).toBe(true);
      expect(holidays.some(h => h.name === 'Noël')).toBe(true);
    });

    it('should calculate Easter-based holidays correctly for 2024', async () => {
      mockApiClient.get.mockRejectedValue(new Error('API Error'));

      const holidays = await service.getPublicHolidaysForYear(2024);
      const easterMonday = holidays.find(h => h.name === 'Lundi de Pâques');
      const ascension = holidays.find(h => h.name === 'Ascension');
      const pentecost = holidays.find(h => h.name === 'Lundi de Pentecôte');

      expect(easterMonday?.date).toBe('2024-04-01');
      expect(ascension?.date).toBe('2024-05-09');
      expect(pentecost?.date).toBe('2024-05-20');
    });

    it('should use cache for subsequent calls', async () => {
      const mockHolidays = [
        { id: '1', date: '2024-01-01', name: "Jour de l'An", isNational: true, country: 'FR' },
      ];

      mockApiClient.get.mockResolvedValue({ data: mockHolidays });

      // First call
      await service.getPublicHolidaysForYear(2024);
      // Second call should use cache
      await service.getPublicHolidaysForYear(2024);

      expect(mockApiClient.get).toHaveBeenCalledTimes(1);
    });
  });

  describe('isPublicHoliday', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should return true for a public holiday', async () => {
      const mockHolidays = [
        { id: '1', date: '2024-01-01', name: "Jour de l'An", isNational: true, country: 'FR' },
        { id: '2', date: '2024-12-25', name: 'Noël', isNational: true, country: 'FR' },
      ];

      mockApiClient.get.mockResolvedValue({ data: mockHolidays });

      expect(await service.isPublicHoliday('2024-01-01')).toBe(true);
      expect(await service.isPublicHoliday('2024-12-25')).toBe(true);
    });

    it('should return false for a regular day', async () => {
      const mockHolidays = [
        { id: '1', date: '2024-01-01', name: "Jour de l'An", isNational: true, country: 'FR' },
      ];

      mockApiClient.get.mockResolvedValue({ data: mockHolidays });

      expect(await service.isPublicHoliday('2024-01-02')).toBe(false);
      expect(await service.isPublicHoliday('2024-06-15')).toBe(false);
    });

    it('should handle different date formats', async () => {
      const mockHolidays = [
        { id: '1', date: '2024-01-01', name: "Jour de l'An", isNational: true, country: 'FR' },
      ];

      mockApiClient.get.mockResolvedValue({ data: mockHolidays });

      expect(await service.isPublicHoliday(new Date('2024-01-01'))).toBe(true);
      expect(await service.isPublicHoliday(new Date('2024-01-02'))).toBe(false);
    });
  });

  describe('createPublicHoliday', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should create a new public holiday via API', async () => {
      const newHoliday = {
        date: '2024-06-15',
        name: 'Fête locale',
        description: 'Jour férié local',
        isNational: false,
        country: 'FR',
      };

      const createdHoliday = {
        id: 'created-id',
        ...newHoliday,
      };

      mockApiClient.post.mockResolvedValue({ data: createdHoliday });

      const result = await service.createPublicHoliday(newHoliday);

      expect(mockApiClient.post).toHaveBeenCalledWith(
        '/api/jours-feries',
        expect.objectContaining({
          date: '2024-06-15',
          name: 'Fête locale',
        })
      );
      expect(result).toEqual(createdHoliday);
    });

    it('should fallback to local storage when API fails', async () => {
      const newHoliday = {
        date: '2024-06-15',
        name: 'Fête locale',
        isNational: false,
      };

      mockApiClient.post.mockRejectedValue(new Error('API Error'));
      mockApiClient.get.mockResolvedValue({ data: [] }); // Empty initial list

      const result = await service.createPublicHoliday(newHoliday);

      expect(result).toMatchObject({
        date: '2024-06-15',
        name: 'Fête locale',
        isNational: false,
      });
      expect(result.id).toBeDefined();
    });
  });

  describe('caching', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should invalidate cache after operations', async () => {
      const mockHolidays = [
        { id: '1', date: '2024-01-01', name: "Jour de l'An", isNational: true, country: 'FR' },
      ];

      mockApiClient.get.mockResolvedValue({ data: mockHolidays });

      // First call - should hit API
      await service.getPublicHolidaysForYear(2024);
      expect(mockApiClient.get).toHaveBeenCalledTimes(1);

      // Second call - should use cache
      await service.getPublicHolidaysForYear(2024);
      expect(mockApiClient.get).toHaveBeenCalledTimes(1);

      // Invalidate cache
      service.invalidateCache();

      // Third call - should hit API again
      await service.getPublicHolidaysForYear(2024);
      expect(mockApiClient.get).toHaveBeenCalledTimes(2);
    });
  });
});

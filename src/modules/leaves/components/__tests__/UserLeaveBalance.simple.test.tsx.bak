import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { cleanup } from '@testing-library/react';
import '@testing-library/jest-dom';
import axios from 'axios';
import UserLeaveBalance from '../UserLeaveBalance';

// Mock d'axios
jest.mock('axios', () => ({
    get: jest.fn()
}));
const mockedAxios = axios as jest.Mocked<typeof axios>;

// Mock des composants UI simples
jest.mock('@/components/ui/card', () => ({
    Card: ({ children, className }: any) => <div data-testid="card" className={className}>{children}</div>,
    CardHeader: ({ children }: any) => <div data-testid="card-header">{children}</div>,
    CardTitle: ({ children }: any) => <h3 data-testid="card-title">{children}</h3>,
    CardContent: ({ children }: any) => <div data-testid="card-content">{children}</div>,
}));

jest.mock('@/components/ui/separator', () => ({
    Separator: () => <hr data-testid="separator" />,
}));

jest.mock('@/components/ui/tooltip', () => ({
    TooltipProvider: ({ children }: any) => <div>{children}</div>,
    Tooltip: ({ children }: any) => <div>{children}</div>,
    TooltipContent: ({ children }: any) => <div data-testid="tooltip-content">{children}</div>,
    TooltipTrigger: ({ children }: any) => <div data-testid="tooltip-trigger">{children}</div>,
}));

jest.mock('@/components/ui/skeleton', () => ({
    Skeleton: ({ className }: any) => <div data-testid="skeleton" className={className}>Loading skeleton...</div>,
}));

describe('UserLeaveBalance Simple Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  afterEach(() => {
    cleanup();
  });

    const mockBalanceData = [
        {
            typeCode: 'ANNUAL',
            typeName: 'Congé Annuel',
            balance: 15.5,
            allowance: 25,
            carryOver: 2.5,
            taken: 12,
            pending: 1,
            transferred: 0,
        },
        {
            typeCode: 'RTT',
            typeName: 'RTT',
            balance: 5,
            allowance: 10,
            carryOver: 0,
            taken: 5,
            pending: 0,
            transferred: 0,
        },
    ];

    beforeEach(() => {
    jest.clearAllMocks();
        jest.clearAllMocks();
    });

    it('renders loading state initially', () => {
        // Mock axios pour ne jamais résoudre
        (mockedAxios.get as jest.Mock).mockImplementation(() => new Promise(() => {}));

        render(<UserLeaveBalance userId={123} />);

        expect(screen.getByTestId('card')).toBeInTheDocument();
        expect(screen.getByText('Chargement des soldes...')).toBeInTheDocument();
        expect(screen.getAllByTestId('skeleton').length).toBeGreaterThan(0);
    });

    it('calls API on mount', () => {
        (mockedAxios.get as jest.Mock).mockResolvedValue({ data: mockBalanceData });

        render(<UserLeaveBalance userId={123} />);

        expect(mockedAxios.get).toHaveBeenCalledWith('/api/conges/balance', {
            params: { userId: 123, year: expect.any(Number) }
        });
    });

    it('handles API errors gracefully', () => {
        (mockedAxios.get as jest.Mock).mockRejectedValue(new Error('API Error'));

        // Vérifier que le composant ne plante pas au rendu
        expect(() => {
            render(<UserLeaveBalance userId={123} />);
        }).not.toThrow();
    });

    it('renders without header when hideHeader is true', () => {
        (mockedAxios.get as jest.Mock).mockResolvedValue({ data: mockBalanceData });

        render(<UserLeaveBalance userId={123} hideHeader={true} />);

        // Dans l'état de chargement, pas d'en-tête si hideHeader=true
        expect(screen.queryByText(/Soldes de congés/)).not.toBeInTheDocument();
        expect(screen.queryByText('Chargement des soldes...')).not.toBeInTheDocument();
    });

    it('shows loading header with year by default', () => {
        (mockedAxios.get as jest.Mock).mockResolvedValue({ data: mockBalanceData });

        render(<UserLeaveBalance userId={123} />);

        // Vérifier l'état de chargement avec header
        expect(screen.getByText('Chargement des soldes...')).toBeInTheDocument();
    });

    it('calls API with custom year parameter', () => {
        (mockedAxios.get as jest.Mock).mockResolvedValue({ data: mockBalanceData });

        render(<UserLeaveBalance userId="test-user" year={2023} />);

        expect(mockedAxios.get).toHaveBeenCalledWith('/api/conges/balance', {
            params: { userId: 'test-user', year: 2023 }
        });
    });

    it('renders with compact prop', () => {
        (mockedAxios.get as jest.Mock).mockResolvedValue({ data: mockBalanceData });

        render(<UserLeaveBalance userId={123} compact={true} />);

        // Vérifier que le composant se rend sans erreur en mode compact
        expect(screen.getByTestId('card')).toBeInTheDocument();
    });
});
import { renderWithProviders as render, screen, fireEvent, waitFor } from '@/test-utils/renderWithProviders';
import { usePathname } from 'next/navigation';
import { StreamlinedNavigation } from '../StreamlinedNavigation';

// Mocks
jest.mock('next/navigation', () => ({
    usePathname: jest.fn()
}));

// Mock framer-motion
jest.mock('framer-motion', () => ({
    motion: {
        div: ({ children, ...props }: any) => <div {...props}>{children}</div>,
        nav: ({ children, ...props }: any) => <nav {...props}>{children}</nav>,
        button: ({ children, ...props }: any) => <button {...props}>{children}</button>,
    },
    AnimatePresence: ({ children }: any) => children
}));

const mockUsePathname = usePathname as jest.Mock;

describe('StreamlinedNavigation', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    const defaultProps = {
        userRole: 'MAR',
        isAdmin: false,
        mobileMenuOpen: false,
        onMobileMenuToggle: jest.fn()
    };

    beforeEach(() => {
    jest.clearAllMocks();
        jest.clearAllMocks();
        mockUsePathname.mockReturnValue('/');
    });

    it('affiche les 3 liens principaux + menu Plus', () => {
        render(<StreamlinedNavigation {...defaultProps} />);

        // Vérifier les 3 liens principaux
        expect(screen.getByRole('link', { name: /accueil/i })).toBeInTheDocument();
        expect(screen.getByRole('link', { name: /planning/i })).toBeInTheDocument();
        expect(screen.getByRole('link', { name: /congés/i })).toBeInTheDocument();

        // Vérifier le menu "Plus"
        expect(screen.getByRole('button', { name: /plus d'options/i })).toBeInTheDocument();
    });

    it('affiche l'indicateur de rôle compact', () => {
        render(<StreamlinedNavigation {...defaultProps} />);

        expect(screen.getByText('MAR')).toBeInTheDocument();
    });

    it('indique la page active correctement', () => {
        mockUsePathname.mockReturnValue('/planning');
        render(<StreamlinedNavigation {...defaultProps} />);

        const planningLink = screen.getByRole('link', { name: /planning/i });
        expect(planningLink).toHaveClass('bg-white', 'text-blue-600');
    });

    it('ouvre le menu "Plus" au clic', async () => {
        render(<StreamlinedNavigation {...defaultProps} />);

        const plusButton = screen.getByRole('button', { name: /plus d'options/i });
        fireEvent.click(plusButton);

        await waitFor(() => {
            expect(screen.getByText('Mes Demandes')).toBeInTheDocument();
            expect(screen.getByText('Notifications')).toBeInTheDocument();
            expect(screen.getByText('Mon Profil')).toBeInTheDocument();
        });
    });

    it('affiche le bouton menu mobile sur mobile', () => {
        render(<StreamlinedNavigation {...defaultProps} />);

        const mobileButton = screen.getByRole('button', { name: /menu principal/i });
        expect(mobileButton).toBeInTheDocument();
    });

    it('appelle onMobileMenuToggle au clic du menu mobile', () => {
        const onMobileMenuToggle = jest.fn();
        render(<StreamlinedNavigation {...defaultProps} onMobileMenuToggle={onMobileMenuToggle} />);

        const mobileButton = screen.getByRole('button', { name: /menu principal/i });
        fireEvent.click(mobileButton);

        expect(onMobileMenuToggle).toHaveBeenCalled();
    });

    it('affiche tous les liens dans le menu mobile', () => {
        render(<StreamlinedNavigation {...defaultProps} mobileMenuOpen={true} />);

        // Tous les liens principaux et secondaires doivent être visibles
        expect(screen.getByText('Accueil')).toBeInTheDocument();
        expect(screen.getByText('Planning')).toBeInTheDocument();
        expect(screen.getByText('Congés')).toBeInTheDocument();
        expect(screen.getByText('Mes Demandes')).toBeInTheDocument();
        expect(screen.getByText('Notifications')).toBeInTheDocument();
        expect(screen.getByText('Mon Profil')).toBeInTheDocument();
    });

    it('adapte l'affichage du rôle selon le rôle utilisateur', () => {
        const { rerender } = render(<StreamlinedNavigation {...defaultProps} userRole="IADE" />);
        expect(screen.getByText('IADE')).toBeInTheDocument();

        rerender(<StreamlinedNavigation {...defaultProps} userRole="ADMIN_TOTAL" />);
        expect(screen.getByText('Admin')).toBeInTheDocument();
    });

    it('ne affiche que les éléments essentiels pour désengorger le header', () => {
        render(<StreamlinedNavigation {...defaultProps} />);

        // Vérifier qu'on a bien seulement 4 éléments visibles dans la nav desktop
        const navElement = screen.getByLabelText('Navigation principale');
        const visibleLinks = navElement.querySelectorAll('a, button');

        // 3 liens + 1 menu "Plus" + 1 indicateur de rôle = 5 éléments max
        expect(visibleLinks.length).toBeLessThanOrEqual(5);
    });
}); 

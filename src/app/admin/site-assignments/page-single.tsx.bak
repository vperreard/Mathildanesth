'use client';

import React, { useState, useEffect } from 'react';
import SiteSelector from '@/components/ui/SiteSelector';
import { useUserSiteAssignments, useSurgeonSiteAssignments } from '@/hooks/useSiteAssignments';
import Link from 'next/link';
import { Settings, Users } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { apiClient } from '@/utils/apiClient';

interface User {
    id: number;
    nom: string;
    prenom: string;
    email: string;
    professionalRole: string;
    isActive: boolean;
}

interface Surgeon {
    id: number;
    nom: string;
    prenom: string;
    email?: string;
    status: string;
    specialties: { name: string }[];
}

interface Site {
    id: string;
    name: string;
    description?: string;
    colorCode?: string;
    isActive: boolean;
}

export default function SiteAssignmentsPage() {
    const [users, setUsers] = useState<User[]>([]);
    const [surgeons, setSurgeons] = useState<Surgeon[]>([]);
    const [sites, setSites] = useState<Site[]>([]);
    const [selectedUser, setSelectedUser] = useState<User | null>(null);
    const [selectedSurgeon, setSelectedSurgeon] = useState<Surgeon | null>(null);
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState<'users' | 'surgeons'>('users');

    const userAssignments = useUserSiteAssignments(selectedUser?.id || 0);
    const surgeonAssignments = useSurgeonSiteAssignments(selectedSurgeon?.id || 0);

    useEffect(() => {
        loadData();
    }, []);

    const loadData = async () => {
        try {
            setLoading(true);

            const [usersRes, surgeonsRes, sitesRes] = await Promise.all([
                apiClient.get('/api/utilisateurs'),
                apiClient.get('/api/chirurgiens'),
                apiClient.get('/api/sites')
            ]);

            setUsers(Array.isArray(usersRes.data) ? usersRes.data : []);
            setSurgeons(Array.isArray(surgeonsRes.data) ? surgeonsRes.data : []);
            setSites(Array.isArray(sitesRes.data) ? sitesRes.data : []);
        } catch (error) {
            console.error('Erreur lors du chargement:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleUserSitesUpdate = async (selectedSites: Site[]) => {
        if (!selectedUser) return;
        const siteIds = selectedSites.map(site => site.id);
        await userAssignments.updateSites(siteIds);
    };

    const handleSurgeonSitesUpdate = async (selectedSites: Site[]) => {
        if (!selectedSurgeon) return;
        const siteIds = selectedSites.map(site => site.id);
        await surgeonAssignments.updateSites(siteIds);
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">Chargement des données...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50 p-6">
            <div className="max-w-7xl mx-auto">
                <div className="mb-8 flex justify-between items-start">
                    <div>
                        <h1 className="text-3xl font-bold text-gray-900 mb-2">
                            Gestion des Affectations de Sites
                        </h1>
                        <p className="text-gray-600">
                            Assignez les utilisateurs et chirurgiens aux différents sites
                        </p>
                    </div>
                    <Link href="/parametres/sites">
                        <Button variant="outline" className="flex items-center gap-2">
                            <Settings className="h-4 w-4" />
                            <span>Gérer les sites</span>
                        </Button>
                    </Link>
                </div>

                <div className="bg-white rounded-lg shadow">
                    <div className="border-b border-gray-200">
                        <nav className="-mb-px flex">
                            <button
                                onClick={() => setActiveTab('users')}
                                className={`py-4 px-6 border-b-2 font-medium text-sm transition-colors ${
                                    activeTab === 'users'
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-gray-500 hover:text-gray-700'
                                }`}
                            >
                                Utilisateurs (MARs/IADEs)
                            </button>
                            <button
                                onClick={() => setActiveTab('surgeons')}
                                className={`py-4 px-6 border-b-2 font-medium text-sm transition-colors ${
                                    activeTab === 'surgeons'
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-gray-500 hover:text-gray-700'
                                }`}
                            >
                                Chirurgiens
                            </button>
                        </nav>
                    </div>

                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 p-6">
                        <div>
                            <h3 className="text-lg font-medium text-gray-900 mb-4">
                                {activeTab === 'users' ? 'Sélectionner un utilisateur' : 'Sélectionner un chirurgien'}
                            </h3>
                            <div className="space-y-1 max-h-[500px] overflow-y-auto border rounded-lg p-2">
                                {activeTab === 'users' ? (
                                    users.length > 0 ? (
                                        users.map(user => (
                                            <button
                                                key={user.id}
                                                onClick={() => setSelectedUser(user)}
                                                className={`w-full text-left px-3 py-1.5 rounded text-sm transition-colors flex items-center justify-between ${
                                                    selectedUser?.id === user.id
                                                        ? 'bg-blue-500 text-white'
                                                        : 'hover:bg-gray-100'
                                                }`}
                                            >
                                                <div className="flex-1 min-w-0">
                                                    <div className="font-medium truncate">
                                                        {user.prenom} {user.nom}
                                                    </div>
                                                    <div className={`text-xs truncate ${
                                                        selectedUser?.id === user.id ? 'text-blue-100' : 'text-gray-500'
                                                    }`}>
                                                        {user.professionalRole}
                                                    </div>
                                                </div>
                                            </button>
                                        ))
                                    ) : (
                                        <p className="text-gray-500 p-4 text-center">Aucun utilisateur trouvé</p>
                                    )
                                ) : (
                                    surgeons.length > 0 ? (
                                        surgeons.map(surgeon => (
                                            <button
                                                key={surgeon.id}
                                                onClick={() => setSelectedSurgeon(surgeon)}
                                                className={`w-full text-left px-3 py-1.5 rounded text-sm transition-colors ${
                                                    selectedSurgeon?.id === surgeon.id
                                                        ? 'bg-blue-500 text-white'
                                                        : 'hover:bg-gray-100'
                                                }`}
                                            >
                                                <div className="font-medium truncate">
                                                    {surgeon.prenom} {surgeon.nom}
                                                </div>
                                                <div className={`text-xs truncate ${
                                                    selectedSurgeon?.id === surgeon.id ? 'text-blue-100' : 'text-gray-500'
                                                }`}>
                                                    {surgeon.specialties.map(s => s.name).join(', ') || 'Aucune spécialité'}
                                                </div>
                                            </button>
                                        ))
                                    ) : (
                                        <p className="text-gray-500 p-4 text-center">Aucun chirurgien trouvé</p>
                                    )
                                )}
                            </div>
                        </div>

                        <div>
                            <h3 className="text-lg font-medium text-gray-900 mb-4">
                                Affectation aux sites
                            </h3>
                            {(activeTab === 'users' && selectedUser) || (activeTab === 'surgeons' && selectedSurgeon) ? (
                                <SiteSelector
                                    selectedSites={activeTab === 'users' ? userAssignments.sites : surgeonAssignments.sites}
                                    onSitesChange={activeTab === 'users' ? handleUserSitesUpdate : handleSurgeonSitesUpdate}
                                    availableSites={sites}
                                    loading={activeTab === 'users' ? userAssignments.loading : surgeonAssignments.loading}
                                    placeholder="Sélectionner des sites..."
                                />
                            ) : (
                                <p className="text-gray-500">
                                    Sélectionnez un {activeTab === 'users' ? 'utilisateur' : 'chirurgien'} pour gérer ses affectations
                                </p>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
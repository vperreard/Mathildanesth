import { NotificationType } from '@prisma/client';
import {
    AssignmentSwapEventType,
    sendAssignmentSwapNotification,
    sendAssignmentSwapNotificationToMany
} from '../assignment-notification-utils';
import { createNotification } from '@/lib/notifications';

// Mock the notifications module
jest.mock('@/lib/notifications', () => ({
    createNotification: jest.fn()
}));

const mockCreateNotification = createNotification as jest.MockedFunction<typeof createNotification>;

// Mock console methods
const consoleSpy = {
    warn: jest.spyOn(console, 'warn').mockImplementation(),
    error: jest.spyOn(console, 'error').mockImplementation()
};

describe('Assignment Notification Utils', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    beforeEach(() => {
    jest.clearAllMocks();
        jest.clearAllMocks();
        Object.values(consoleSpy).forEach(spy => spy.mockClear());
    });

    describe('AssignmentSwapEventType enum', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('should have all expected event types', () => {
            expect(AssignmentSwapEventType.SWAP_REQUESTED).toBe('SWAP_REQUESTED');
            expect(AssignmentSwapEventType.SWAP_ACCEPTED).toBe('SWAP_ACCEPTED');
            expect(AssignmentSwapEventType.SWAP_REJECTED).toBe('SWAP_REJECTED');
            expect(AssignmentSwapEventType.SWAP_CANCELLED).toBe('SWAP_CANCELLED');
            expect(AssignmentSwapEventType.SWAP_COMPLETED).toBe('SWAP_COMPLETED');
            expect(AssignmentSwapEventType.SWAP_ADMIN_APPROVED).toBe('SWAP_ADMIN_APPROVED');
            expect(AssignmentSwapEventType.SWAP_ADMIN_REJECTED).toBe('SWAP_ADMIN_REJECTED');
        });

        it('should have 7 event types', () => {
            const eventTypes = Object.values(AssignmentSwapEventType);
            expect(eventTypes).toHaveLength(7);
        });

        it('should have unique values', () => {
            const eventTypes = Object.values(AssignmentSwapEventType);
            const uniqueTypes = new Set(eventTypes);
            expect(eventTypes.length).toBe(uniqueTypes.size);
        });
    });

    describe('sendAssignmentSwapNotification', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        const mockNotification = {
            id: 'notif-123',
            userId: 1,
            type: NotificationType.ASSIGNMENT_SWAP_REQUEST_RECEIVED,
            message: 'Test notification',
            link: '/affectations/echanges/swap-123',
            createdAt: new Date(),
            read: false
        };

        beforeEach(() => {
    jest.clearAllMocks();
            mockCreateNotification.mockResolvedValue(mockNotification);
        });

        it('should send notification for SWAP_REQUESTED event', async () => {
            const result = await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_REQUESTED,
                'swap-123',
                2
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_RECEIVED,
                message: 'Nouvelle demande d'échange d'affectation reçue',
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: 2,
                relatedRequestId: 'swap-123'
            });
            expect(result).toEqual(mockNotification);
        });

        it('should send notification for SWAP_ACCEPTED event', async () => {
            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_ACCEPTED,
                'swap-123'
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_ACCEPTED,
                message: 'Votre demande d'échange d'affectation a été acceptée',
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: undefined,
                relatedRequestId: 'swap-123'
            });
        });

        it('should send notification for SWAP_REJECTED event', async () => {
            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_REJECTED,
                'swap-123',
                2
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_REJECTED,
                message: 'Votre demande d'échange d'affectation a été refusée',
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: 2,
                relatedRequestId: 'swap-123'
            });
        });

        it('should send notification for SWAP_CANCELLED event', async () => {
            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_CANCELLED,
                'swap-123'
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_CANCELLED,
                message: 'Une demande d'échange d'affectation a été annulée',
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: undefined,
                relatedRequestId: 'swap-123'
            });
        });

        it('should send notification for SWAP_COMPLETED event', async () => {
            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_COMPLETED,
                'swap-123'
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_ACCEPTED,
                message: 'L'échange d'affectation a été finalisé avec succès',
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: undefined,
                relatedRequestId: 'swap-123'
            });
        });

        it('should send notification for SWAP_ADMIN_APPROVED event', async () => {
            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_ADMIN_APPROVED,
                'swap-123',
                2
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_APPROVED_ADMIN,
                message: 'Votre demande d'échange a été approuvée par un administrateur',
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: 2,
                relatedRequestId: 'swap-123'
            });
        });

        it('should send notification for SWAP_ADMIN_REJECTED event', async () => {
            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_ADMIN_REJECTED,
                'swap-123',
                2
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.GENERAL_INFO,
                message: 'Votre demande d'échange a été rejetée par un administrateur',
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: 2,
                relatedRequestId: 'swap-123'
            });
        });

        it('should use custom message when provided', async () => {
            const customMessage = 'Message personnalisé pour l'échange';

            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_REQUESTED,
                'swap-123',
                2,
                customMessage
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_RECEIVED,
                message: customMessage,
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: 2,
                relatedRequestId: 'swap-123'
            });
        });

        it('should handle invalid event type gracefully', async () => {
            const invalidEventType = 'INVALID_EVENT' as AssignmentSwapEventType;

            const result = await sendAssignmentSwapNotification(
                1,
                invalidEventType,
                'swap-123'
            );

            expect(result).toBeNull();
            expect(consoleSpy.warn).toHaveBeenCalledWith(
                'Type d'événement non configuré: INVALID_EVENT'
            );
            expect(mockCreateNotification).not.toHaveBeenCalled();
        });

        it('should handle createNotification errors', async () => {
            const error = new Error('Database connection failed');
            mockCreateNotification.mockRejectedValue(error);

            const result = await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_REQUESTED,
                'swap-123'
            );

            expect(result).toBeNull();
            expect(consoleSpy.error).toHaveBeenCalledWith(
                'Erreur lors de l'envoi de la notification d'échange d'affectation:',
                error
            );
        });

        it('should generate correct link for swap request', async () => {
            const swapRequestId = 'very-long-swap-request-id-123456';

            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_REQUESTED,
                swapRequestId
            );

            expect(mockCreateNotification).toHaveBeenCalledWith(
                expect.objectContaining({
                    link: `/affectations/echanges/${swapRequestId}`
                })
            );
        });

        it('should work with all optional parameters undefined', async () => {
            await sendAssignmentSwapNotification(
                1,
                AssignmentSwapEventType.SWAP_REQUESTED,
                'swap-123'
            );

            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 1,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_RECEIVED,
                message: 'Nouvelle demande d'échange d'affectation reçue',
                link: '/affectations/echanges/swap-123',
                triggeredByUserId: undefined,
                relatedRequestId: 'swap-123'
            });
        });
    });

    describe('sendAssignmentSwapNotificationToMany', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        const mockNotification = {
            id: 'notif-123',
            userId: 1,
            type: NotificationType.ASSIGNMENT_SWAP_REQUEST_RECEIVED,
            message: 'Test notification',
            link: '/affectations/echanges/swap-123',
            createdAt: new Date(),
            read: false
        };

        beforeEach(() => {
    jest.clearAllMocks();
            mockCreateNotification.mockResolvedValue(mockNotification);
        });

        it('should send notifications to multiple users', async () => {
            const userIds = [1, 2, 3];

            const results = await sendAssignmentSwapNotificationToMany(
                userIds,
                AssignmentSwapEventType.SWAP_REQUESTED,
                'swap-123',
                4,
                'Custom message for all'
            );

            expect(results).toHaveLength(3);
            expect(mockCreateNotification).toHaveBeenCalledTimes(3);

            userIds.forEach(userId => {
                expect(mockCreateNotification).toHaveBeenCalledWith({
                    userId,
                    type: NotificationType.ASSIGNMENT_SWAP_REQUEST_RECEIVED,
                    message: 'Custom message for all',
                    link: '/affectations/echanges/swap-123',
                    triggeredByUserId: 4,
                    relatedRequestId: 'swap-123'
                });
            });
        });

        it('should handle empty user list', async () => {
            const results = await sendAssignmentSwapNotificationToMany(
                [],
                AssignmentSwapEventType.SWAP_REQUESTED,
                'swap-123'
            );

            expect(results).toHaveLength(0);
            expect(mockCreateNotification).not.toHaveBeenCalled();
        });

        it('should continue processing when some notifications fail', async () => {
            const userIds = [1, 2, 3];
            
            // Mock first call to succeed, second to fail, third to succeed
            mockCreateNotification
                .mockResolvedValueOnce(mockNotification)
                .mockRejectedValueOnce(new Error('Failed for user 2'))
                .mockResolvedValueOnce({ ...mockNotification, userId: 3 });

            const results = await sendAssignmentSwapNotificationToMany(
                userIds,
                AssignmentSwapEventType.SWAP_REQUESTED,
                'swap-123'
            );

            // Should only include successful notifications
            expect(results).toHaveLength(2);
            expect(mockCreateNotification).toHaveBeenCalledTimes(3);
            expect(consoleSpy.error).toHaveBeenCalledTimes(1);
        });

        it('should handle all notifications failing', async () => {
            const userIds = [1, 2, 3];
            mockCreateNotification.mockRejectedValue(new Error('Database error'));

            const results = await sendAssignmentSwapNotificationToMany(
                userIds,
                AssignmentSwapEventType.SWAP_REQUESTED,
                'swap-123'
            );

            expect(results).toHaveLength(0);
            expect(mockCreateNotification).toHaveBeenCalledTimes(3);
            expect(consoleSpy.error).toHaveBeenCalledTimes(3);
        });

        it('should work with single user in array', async () => {
            const results = await sendAssignmentSwapNotificationToMany(
                [42],
                AssignmentSwapEventType.SWAP_COMPLETED,
                'swap-456'
            );

            expect(results).toHaveLength(1);
            expect(mockCreateNotification).toHaveBeenCalledWith({
                userId: 42,
                type: NotificationType.ASSIGNMENT_SWAP_REQUEST_ACCEPTED,
                message: 'L'échange d'affectation a été finalisé avec succès',
                link: '/affectations/echanges/swap-456',
                triggeredByUserId: undefined,
                relatedRequestId: 'swap-456'
            });
        });

        it('should pass all parameters correctly to individual notifications', async () => {
            const userIds = [10, 20];
            const eventType = AssignmentSwapEventType.SWAP_ADMIN_APPROVED;
            const swapRequestId = 'admin-swap-789';
            const triggeredByUserId = 1;
            const customMessage = 'Admin has approved your swap request';

            await sendAssignmentSwapNotificationToMany(
                userIds,
                eventType,
                swapRequestId,
                triggeredByUserId,
                customMessage
            );

            userIds.forEach(userId => {
                expect(mockCreateNotification).toHaveBeenCalledWith({
                    userId,
                    type: NotificationType.ASSIGNMENT_SWAP_REQUEST_APPROVED_ADMIN,
                    message: customMessage,
                    link: `/affectations/echanges/${swapRequestId}`,
                    triggeredByUserId,
                    relatedRequestId: swapRequestId
                });
            });
        });
    });

    describe('Integration scenarios', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('should maintain event type to notification type mapping consistency', () => {
            // Test that all event types have corresponding notification behavior
            const eventTypes = Object.values(AssignmentSwapEventType);
            
            eventTypes.forEach(async (eventType) => {
                mockCreateNotification.mockResolvedValueOnce({
                    id: 'test',
                    userId: 1,
                    type: NotificationType.GENERAL_INFO,
                    message: 'test',
                    link: 'test',
                    createdAt: new Date(),
                    read: false
                });

                const result = await sendAssignmentSwapNotification(
                    1,
                    eventType,
                    'test-swap'
                );

                // Should not return null for valid event types
                expect(result).not.toBeNull();
            });
        });

        it('should handle concurrent notification sending', async () => {
            const users1 = [1, 2];
            const users2 = [3, 4];
            
            mockCreateNotification.mockResolvedValue({
                id: 'concurrent-test',
                userId: 1,
                type: NotificationType.GENERAL_INFO,
                message: 'test',
                link: 'test',
                createdAt: new Date(),
                read: false
            });

            // Send notifications concurrently
            const [results1, results2] = await Promise.all([
                sendAssignmentSwapNotificationToMany(
                    users1,
                    AssignmentSwapEventType.SWAP_REQUESTED,
                    'swap-1'
                ),
                sendAssignmentSwapNotificationToMany(
                    users2,
                    AssignmentSwapEventType.SWAP_ACCEPTED,
                    'swap-2'
                )
            ]);

            expect(results1).toHaveLength(2);
            expect(results2).toHaveLength(2);
            expect(mockCreateNotification).toHaveBeenCalledTimes(4);
        });

        it('should validate link generation format', async () => {
            const testCases = [
                'simple-swap',
                'swap-with-dashes-123',
                'UPPERCASE_SWAP',
                'swap.with.dots',
                '123456789'
            ];

            for (const swapId of testCases) {
                await sendAssignmentSwapNotification(
                    1,
                    AssignmentSwapEventType.SWAP_REQUESTED,
                    swapId
                );

                expect(mockCreateNotification).toHaveBeenCalledWith(
                    expect.objectContaining({
                        link: `/affectations/echanges/${swapId}`
                    })
                );
            }
        });
    });
});
import { getDefaultTemplates, RulesTemplate } from '../default-rule-templates';
import { ShiftType } from '@/types/common';

describe('Default Rule Templates', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    let templates: RulesTemplate[];

    beforeEach(() => {
    jest.clearAllMocks();
        templates = getDefaultTemplates();
    });

    describe('getDefaultTemplates', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('retourne un tableau de templates non vide', () => {
            expect(Array.isArray(templates)).toBe(true);
            expect(templates.length).toBeGreaterThan(0);
        });

        it('retourne exactement 4 templates par défaut', () => {
            expect(templates).toHaveLength(4);
        });

        it('tous les templates ont les propriétés requises', () => {
            templates.forEach(template => {
                expect(template).toHaveProperty('name');
                expect(template).toHaveProperty('description');
                expect(template).toHaveProperty('category');
                expect(template).toHaveProperty('rules');
                expect(template).toHaveProperty('fatigueConfig');
                expect(template).toHaveProperty('isDefault');

                expect(typeof template.name).toBe('string');
                expect(typeof template.description).toBe('string');
                expect(typeof template.isDefault).toBe('boolean');
                expect(template.name.length).toBeGreaterThan(0);
                expect(template.description.length).toBeGreaterThan(0);
            });
        });

        it('tous les templates sont marqués comme défaut', () => {
            templates.forEach(template => {
                expect(template.isDefault).toBe(true);
            });
        });
    });

    describe('Catégories de templates', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('contient le template STANDARD', () => {
            const standardTemplate = templates.find(t => t.category === 'STANDARD');
            expect(standardTemplate).toBeDefined();
            expect(standardTemplate!.name).toContain('Standard');
            expect(standardTemplate!.description).toContain('équilibrée');
        });

        it('contient le template INTENSIF', () => {
            const intensifTemplate = templates.find(t => t.category === 'INTENSIF');
            expect(intensifTemplate).toBeDefined();
            expect(intensifTemplate!.name).toContain('Intensif');
            expect(intensifTemplate!.description).toContain('CHU');
        });

        it('contient le template ALLEGE', () => {
            const allegeTemplate = templates.find(t => t.category === 'ALLEGE');
            expect(allegeTemplate).toBeDefined();
            expect(allegeTemplate!.name).toContain('Allégé');
            expect(allegeTemplate!.description).toContain('petite');
        });

        it('contient le template PEDIATRIE', () => {
            const pediatrieTemplate = templates.find(t => t.category === 'PEDIATRIE');
            expect(pediatrieTemplate).toBeDefined();
            expect(pediatrieTemplate!.name).toContain('Pédiatrie');
            expect(pediatrieTemplate!.description).toContain('pédiatrie');
        });

        it('toutes les catégories sont valides', () => {
            const validCategories = ['STANDARD', 'INTENSIF', 'ALLEGE', 'PEDIATRIE', 'CUSTOM'];
            templates.forEach(template => {
                expect(validCategories).toContain(template.category);
            });
        });
    });

    describe('Structure des règles', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('tous les templates ont une configuration de règles complète', () => {
            templates.forEach(template => {
                const { rules } = template;

                expect(rules).toHaveProperty('weekdayShifts');
                expect(rules).toHaveProperty('weekendShifts');
                expect(rules).toHaveProperty('minimumRestPeriod');
                expect(rules).toHaveProperty('shiftStartTimes');
                expect(rules).toHaveProperty('shiftEndTimes');
                expect(rules).toHaveProperty('shiftSpecialties');
                expect(rules).toHaveProperty('intervalle');
                expect(rules).toHaveProperty('supervision');
                expect(rules).toHaveProperty('consultations');
                expect(rules).toHaveProperty('equite');
                expect(rules).toHaveProperty('qualiteVie');

                expect(Array.isArray(rules.weekdayShifts)).toBe(true);
                expect(Array.isArray(rules.weekendShifts)).toBe(true);
                expect(typeof rules.minimumRestPeriod).toBe('number');
                expect(rules.minimumRestPeriod).toBeGreaterThan(0);
            });
        });

        it('tous les types de shift ont des heures de début et de fin', () => {
            templates.forEach(template => {
                const { shiftStartTimes, shiftEndTimes } = template.rules;

                Object.values(ShiftType).forEach(shiftType => {
                    expect(shiftStartTimes).toHaveProperty(shiftType);
                    expect(shiftEndTimes).toHaveProperty(shiftType);
                    expect(typeof shiftStartTimes[shiftType]).toBe('string');
                    expect(typeof shiftEndTimes[shiftType]).toBe('string');
                    expect(shiftStartTimes[shiftType]).toMatch(/^\d{2}:\d{2}$/);
                    expect(shiftEndTimes[shiftType]).toMatch(/^\d{2}:\d{2}$/);
                });
            });
        });

        it('la configuration des intervalles est valide', () => {
            templates.forEach(template => {
                const { intervalle } = template.rules;

                expect(intervalle).toHaveProperty('minJoursEntreGardes');
                expect(intervalle).toHaveProperty('minJoursRecommandes');
                expect(intervalle).toHaveProperty('maxGardesMois');
                expect(intervalle).toHaveProperty('maxGardesConsecutives');
                expect(intervalle).toHaveProperty('maxAstreintesMois');

                expect(typeof intervalle.minJoursEntreGardes).toBe('number');
                expect(typeof intervalle.minJoursRecommandes).toBe('number');
                expect(typeof intervalle.maxGardesMois).toBe('number');
                expect(typeof intervalle.maxGardesConsecutives).toBe('number');
                expect(typeof intervalle.maxAstreintesMois).toBe('number');

                expect(intervalle.minJoursEntreGardes).toBeGreaterThan(0);
                expect(intervalle.minJoursRecommandes).toBeGreaterThan(0);
                expect(intervalle.maxGardesMois).toBeGreaterThan(0);
                expect(intervalle.maxGardesConsecutives).toBeGreaterThan(0);
                expect(intervalle.maxAstreintesMois).toBeGreaterThan(0);
            });
        });

        it('la configuration de supervision est valide', () => {
            templates.forEach(template => {
                const { supervision } = template.rules;

                expect(supervision).toHaveProperty('maxSallesParMAR');
                expect(supervision).toHaveProperty('maxSallesExceptionnel');
                expect(supervision).toHaveProperty('reglesSecteursCompatibles');

                expect(typeof supervision.maxSallesParMAR).toBe('object');
                expect(typeof supervision.maxSallesExceptionnel).toBe('number');
                expect(typeof supervision.reglesSecteursCompatibles).toBe('object');

                expect(supervision.maxSallesExceptionnel).toBeGreaterThan(0);

                Object.values(supervision.maxSallesParMAR).forEach(value => {
                    expect(typeof value).toBe('number');
                    expect(value).toBeGreaterThan(0);
                });
            });
        });
    });

    describe('Configuration de fatigue', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('tous les templates ont une configuration de fatigue complète', () => {
            templates.forEach(template => {
                const { fatigueConfig } = template;

                expect(fatigueConfig).toHaveProperty('enabled');
                expect(fatigueConfig).toHaveProperty('points');
                expect(fatigueConfig).toHaveProperty('recovery');
                expect(fatigueConfig).toHaveProperty('seuils');

                expect(typeof fatigueConfig.enabled).toBe('boolean');
                expect(fatigueConfig.enabled).toBe(true);
            });
        });

        it('la configuration des points de fatigue est valide', () => {
            templates.forEach(template => {
                const { points } = template.fatigueConfig;

                expect(points).toHaveProperty('garde');
                expect(points).toHaveProperty('astreinte');
                expect(points).toHaveProperty('supervisionMultiple');
                expect(points).toHaveProperty('pediatrie');
                expect(points).toHaveProperty('specialiteLourde');

                expect(typeof points.garde).toBe('number');
                expect(typeof points.astreinte).toBe('number');
                expect(typeof points.supervisionMultiple).toBe('number');
                expect(typeof points.pediatrie).toBe('number');
                expect(typeof points.specialiteLourde).toBe('number');

                expect(points.garde).toBeGreaterThan(0);
                expect(points.astreinte).toBeGreaterThan(0);
                expect(points.supervisionMultiple).toBeGreaterThan(0);
                expect(points.pediatrie).toBeGreaterThan(0);
                expect(points.specialiteLourde).toBeGreaterThan(0);
            });
        });

        it('la configuration de récupération est valide', () => {
            templates.forEach(template => {
                const { recovery } = template.fatigueConfig;

                expect(recovery).toHaveProperty('jourOff');
                expect(recovery).toHaveProperty('demiJourneeOff');
                expect(recovery).toHaveProperty('weekend');

                expect(typeof recovery.jourOff).toBe('number');
                expect(typeof recovery.demiJourneeOff).toBe('number');
                expect(typeof recovery.weekend).toBe('number');

                expect(recovery.jourOff).toBeGreaterThan(0);
                expect(recovery.demiJourneeOff).toBeGreaterThan(0);
                expect(recovery.weekend).toBeGreaterThan(0);
            });
        });

        it('les seuils de fatigue sont cohérents', () => {
            templates.forEach(template => {
                const { seuils } = template.fatigueConfig;

                expect(seuils).toHaveProperty('alerte');
                expect(seuils).toHaveProperty('critique');

                expect(typeof seuils.alerte).toBe('number');
                expect(typeof seuils.critique).toBe('number');

                expect(seuils.alerte).toBeGreaterThan(0);
                expect(seuils.critique).toBeGreaterThan(seuils.alerte);
            });
        });
    });

    describe('Différences entre templates', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('le template INTENSIF a des contraintes plus strictes que STANDARD', () => {
            const standardTemplate = templates.find(t => t.category === 'STANDARD')!;
            const intensifTemplate = templates.find(t => t.category === 'INTENSIF')!;

            expect(intensifTemplate.rules.minimumRestPeriod).toBeLessThanOrEqual(
                standardTemplate.rules.minimumRestPeriod
            );
            expect(intensifTemplate.rules.intervalle.maxGardesMois).toBeGreaterThanOrEqual(
                standardTemplate.rules.intervalle.maxGardesMois
            );
            expect(intensifTemplate.fatigueConfig.seuils.critique).toBeGreaterThanOrEqual(
                standardTemplate.fatigueConfig.seuils.critique
            );
        });

        it('le template ALLEGE a des contraintes plus souples que STANDARD', () => {
            const standardTemplate = templates.find(t => t.category === 'STANDARD')!;
            const allegeTemplate = templates.find(t => t.category === 'ALLEGE')!;

            expect(allegeTemplate.rules.minimumRestPeriod).toBeGreaterThanOrEqual(
                standardTemplate.rules.minimumRestPeriod
            );
            expect(allegeTemplate.rules.intervalle.maxGardesMois).toBeLessThanOrEqual(
                standardTemplate.rules.intervalle.maxGardesMois
            );
            expect(allegeTemplate.fatigueConfig.seuils.critique).toBeLessThanOrEqual(
                standardTemplate.fatigueConfig.seuils.critique
            );
        });

        it('le template PEDIATRIE a des spécialisations appropriées', () => {
            const pediatrieTemplate = templates.find(t => t.category === 'PEDIATRIE')!;

            Object.values(pediatrieTemplate.rules.shiftSpecialties).forEach(specialties => {
                expect(specialties).toContain('pediatrie');
            });

            expect(pediatrieTemplate.rules.supervision.maxSallesParMAR).toHaveProperty('pediatrie');
            expect(pediatrieTemplate.rules.supervision.reglesSecteursCompatibles).toHaveProperty('pediatrie');
            expect(pediatrieTemplate.fatigueConfig.points).toHaveProperty('pediatrie');
        });
    });

    describe('Cohérence des données', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('les shifts du weekend sont inclus dans les shifts de semaine pour certains templates', () => {
            templates.forEach(template => {
                const { weekdayShifts, weekendShifts } = template.rules;

                weekendShifts.forEach(weekendShift => {
                    expect([...weekdayShifts, ShiftType.GARDE_WEEKEND, ShiftType.ASTREINTE_WEEKEND])
                        .toContain(weekendShift);
                });
            });
        });

        it('toutes les spécialités mentionnées dans supervision sont cohérentes', () => {
            templates.forEach(template => {
                const { supervision } = template.rules;
                const maxSallesKeys = Object.keys(supervision.maxSallesParMAR);
                const secteursKeys = Object.keys(supervision.reglesSecteursCompatibles);

                maxSallesKeys.forEach(specialty => {
                    if (specialty !== 'standard') {
                        expect(secteursKeys).toContain(specialty);
                    }
                });
            });
        });

        it('les heures de début sont antérieures aux heures de fin (sauf gardes 24h)', () => {
            templates.forEach(template => {
                const { shiftStartTimes, shiftEndTimes } = template.rules;

                Object.values(ShiftType).forEach(shiftType => {
                    if (shiftType !== ShiftType.GARDE_24H && 
                        shiftType !== ShiftType.GARDE_WEEKEND &&
                        shiftType !== ShiftType.ASTREINTE &&
                        shiftType !== ShiftType.ASTREINTE_SEMAINE &&
                        shiftType !== ShiftType.ASTREINTE_WEEKEND) {
                        
                        const startTime = shiftStartTimes[shiftType];
                        const endTime = shiftEndTimes[shiftType];
                        
                        const startMinutes = parseInt(startTime.split(':')[0]) * 60 + parseInt(startTime.split(':')[1]);
                        const endMinutes = parseInt(endTime.split(':')[0]) * 60 + parseInt(endTime.split(':')[1]);
                        
                        if (shiftType !== ShiftType.NUIT) {
                            expect(startMinutes).toBeLessThan(endMinutes);
                        }
                    }
                });
            });
        });
    });
});
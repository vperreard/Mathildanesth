import { logger } from '../logger';

describe('Logger', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    let consoleLogSpy: jest.SpyInstance;
    let consoleWarnSpy: jest.SpyInstance;
    let consoleErrorSpy: jest.SpyInstance;

    beforeEach(() => {
    jest.clearAllMocks();
        consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
        consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
        consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
    });

    afterEach(() => {
        consoleLogSpy.mockRestore();
        consoleWarnSpy.mockRestore();
        consoleErrorSpy.mockRestore();
    });

    it('should log info messages', () => {
        logger.info('Test info message');
        expect(consoleLogSpy).toHaveBeenCalledWith(
            expect.stringContaining('[INFO]'),
            'Test info message'
        );
    });

    it('should log warning messages', () => {
        logger.warn('Test warning message');
        expect(consoleWarnSpy).toHaveBeenCalledWith(
            expect.stringContaining('[WARN]'),
            'Test warning message'
        );
    });

    it('should log error messages', () => {
        logger.error('Test error message');
        expect(consoleErrorSpy).toHaveBeenCalledWith(
            expect.stringContaining('[ERROR]'),
            'Test error message'
        );
    });

    it('should include timestamp in log messages', () => {
        logger.info('Test message');
        expect(consoleLogSpy).toHaveBeenCalledWith(
            expect.stringMatching(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/),
            'Test message'
        );
    });
});
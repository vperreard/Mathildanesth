import {
    dataCy,
    prefixDataCy,
    dataCyWithPrefix,
    extractDataCyProps,
    DataCyProps
} from '../testUtils';

describe('TestUtils', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    describe('dataCy', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('crée un objet avec l'attribut data-cy', () => {
            const result = dataCy('test-button');
            
            expect(result).toEqual({ 'data-cy': 'test-button' });
            expect(result).toHaveProperty('data-cy', 'test-button');
        });

        it('fonctionne avec des identifiants vides', () => {
            const result = dataCy('');
            
            expect(result).toEqual({ 'data-cy': '' });
        });

        it('fonctionne avec des identifiants complexes', () => {
            const complexId = 'user-profile-settings-button-123';
            const result = dataCy(complexId);
            
            expect(result).toEqual({ 'data-cy': complexId });
        });

        it('fonctionne avec des caractères spéciaux', () => {
            const specialId = 'test-button_with.special@chars';
            const result = dataCy(specialId);
            
            expect(result).toEqual({ 'data-cy': specialId });
        });

        it('retourne un nouvel objet à chaque appel', () => {
            const result1 = dataCy('test');
            const result2 = dataCy('test');
            
            expect(result1).toEqual(result2);
            expect(result1).not.toBe(result2); // Différentes références d'objets
        });
    });

    describe('prefixDataCy', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('combine correctement un préfixe et un id', () => {
            const result = prefixDataCy('form', 'submit-button');
            
            expect(result).toBe('form-submit-button');
        });

        it('fonctionne avec des préfixes et ids vides', () => {
            expect(prefixDataCy('', 'id')).toBe('-id');
            expect(prefixDataCy('prefix', '')).toBe('prefix-');
            expect(prefixDataCy('', '')).toBe('-');
        });

        it('fonctionne avec des valeurs complexes', () => {
            const prefix = 'user-management';
            const id = 'edit-profile-form-field-email';
            const result = prefixDataCy(prefix, id);
            
            expect(result).toBe('user-management-edit-profile-form-field-email');
        });

        it('gère les caractères spéciaux', () => {
            const result = prefixDataCy('test_prefix', 'id.with@special');
            
            expect(result).toBe('test_prefix-id.with@special');
        });

        it('est cohérent avec les mêmes paramètres', () => {
            const result1 = prefixDataCy('prefix', 'id');
            const result2 = prefixDataCy('prefix', 'id');
            
            expect(result1).toBe(result2);
        });
    });

    describe('dataCyWithPrefix', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('combine dataCy et prefixDataCy correctement', () => {
            const result = dataCyWithPrefix('form', 'submit');
            
            expect(result).toEqual({ 'data-cy': 'form-submit' });
        });

        it('équivaut à dataCy(prefixDataCy(prefix, id))', () => {
            const prefix = 'component';
            const id = 'action';
            
            const result1 = dataCyWithPrefix(prefix, id);
            const result2 = dataCy(prefixDataCy(prefix, id));
            
            expect(result1).toEqual(result2);
        });

        it('fonctionne avec des valeurs vides', () => {
            const result = dataCyWithPrefix('', '');
            
            expect(result).toEqual({ 'data-cy': '-' });
        });

        it('fonctionne avec des valeurs complexes', () => {
            const result = dataCyWithPrefix('user-dashboard', 'profile-edit-button');
            
            expect(result).toEqual({ 'data-cy': 'user-dashboard-profile-edit-button' });
        });

        it('retourne un nouvel objet à chaque appel', () => {
            const result1 = dataCyWithPrefix('test', 'id');
            const result2 = dataCyWithPrefix('test', 'id');
            
            expect(result1).toEqual(result2);
            expect(result1).not.toBe(result2);
        });
    });

    describe('extractDataCyProps', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('extrait l'attribut data-cy des props', () => {
            const props = {
                'data-cy': 'test-component',
                className: 'btn',
                onClick: () => {},
                disabled: false
            };
            
            const result = extractDataCyProps(props);
            
            expect(result).toEqual({ 'data-cy': 'test-component' });
        });

        it('retourne un objet vide si data-cy n'existe pas', () => {
            const props = {
                className: 'btn',
                onClick: () => {},
                disabled: false
            };
            
            const result = extractDataCyProps(props);
            
            expect(result).toEqual({});
        });

        it('retourne un objet vide si data-cy est undefined', () => {
            const props = {
                'data-cy': undefined,
                className: 'btn'
            };
            
            const result = extractDataCyProps(props);
            
            expect(result).toEqual({});
        });

        it('retourne un objet vide si data-cy est null', () => {
            const props = {
                'data-cy': null,
                className: 'btn'
            };
            
            const result = extractDataCyProps(props);
            
            expect(result).toEqual({});
        });

        it('retourne un objet vide si data-cy est une chaîne vide (comportement falsy)', () => {
            const props = {
                'data-cy': '',
                className: 'btn'
            };
            
            const result = extractDataCyProps(props);
            
            expect(result).toEqual({});
        });

        it('ignore les autres props', () => {
            const props = {
                'data-cy': 'test',
                'data-testid': 'should-be-ignored',
                className: 'should-be-ignored',
                onClick: () => {},
                style: { color: 'red' },
                children: 'Some text'
            };
            
            const result = extractDataCyProps(props);
            
            expect(result).toEqual({ 'data-cy': 'test' });
            expect(result).not.toHaveProperty('data-testid');
            expect(result).not.toHaveProperty('className');
        });

        it('fonctionne avec un objet props vide', () => {
            const result = extractDataCyProps({});
            
            expect(result).toEqual({});
        });

        it('fonctionne avec des valeurs data-cy complexes', () => {
            const complexValue = 'namespace-component-element-state-modifier';
            const props = {
                'data-cy': complexValue,
                other: 'value'
            };
            
            const result = extractDataCyProps(props);
            
            expect(result).toEqual({ 'data-cy': complexValue });
        });

        it('retourne un nouvel objet à chaque appel', () => {
            const props = { 'data-cy': 'test' };
            const result1 = extractDataCyProps(props);
            const result2 = extractDataCyProps(props);
            
            expect(result1).toEqual(result2);
            expect(result1).not.toBe(result2);
        });
    });

    describe('Intégration des fonctions', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('les fonctions fonctionnent ensemble dans un workflow complet', () => {
            // Créer un data-cy avec préfixe
            const prefixedDataCy = dataCyWithPrefix('user-form', 'email-field');
            expect(prefixedDataCy).toEqual({ 'data-cy': 'user-form-email-field' });
            
            // Simuler des props d'un composant qui incluent ce data-cy
            const componentProps = {
                ...prefixedDataCy,
                type: 'email',
                required: true,
                placeholder: 'Entrez votre email'
            };
            
            // Extraire seulement les props data-cy
            const extractedDataCy = extractDataCyProps(componentProps);
            expect(extractedDataCy).toEqual({ 'data-cy': 'user-form-email-field' });
        });

        it('permet de construire une hiérarchie de sélecteurs Cypress', () => {
            const formDataCy = dataCy('registration-form');
            const fieldDataCy = dataCyWithPrefix('registration-form', 'email-field');
            const buttonDataCy = dataCyWithPrefix('registration-form', 'submit-button');
            
            expect(formDataCy).toEqual({ 'data-cy': 'registration-form' });
            expect(fieldDataCy).toEqual({ 'data-cy': 'registration-form-email-field' });
            expect(buttonDataCy).toEqual({ 'data-cy': 'registration-form-submit-button' });
        });

        it('gère les cas d'usage avec des composants HOC', () => {
            // Simuler des props reçues par un HOC
            const originalProps = {
                'data-cy': 'wrapped-component',
                onClick: () => {},
                className: 'btn-primary'
            };
            
            // Le HOC extrait les props data-cy pour les passer au composant enfant
            const dataCyProps = extractDataCyProps(originalProps);
            
            // Le HOC peut aussi ajouter ses propres data-cy
            const hocDataCy = dataCyWithPrefix('hoc', 'wrapper');
            
            expect(dataCyProps).toEqual({ 'data-cy': 'wrapped-component' });
            expect(hocDataCy).toEqual({ 'data-cy': 'hoc-wrapper' });
        });
    });

    describe('Types TypeScript', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

        it('dataCy retourne le bon type', () => {
            const result: DataCyProps = dataCy('test');
            
            expect(result).toHaveProperty('data-cy');
            expect(typeof result['data-cy']).toBe('string');
        });

        it('extractDataCyProps accepte any et retourne DataCyProps', () => {
            const anyProps: any = { 'data-cy': 'test', randomProp: 123 };
            const result: DataCyProps = extractDataCyProps(anyProps);
            
            expect(result).toEqual({ 'data-cy': 'test' });
        });
    });
});
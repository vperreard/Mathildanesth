import { Specialty, SpecialtyType, CreateSpecialtyRequest } from '../specialty';

describe('Specialty types', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('SpecialtyType enum', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should define medical specialties', () => {
      // Test that common medical specialties are defined
      expect(typeof SpecialtyType).toBe('object');
    });
  });

  describe('Specialty interface', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should define specialty structure', () => {
      const specialty: Specialty = {
        id: 1,
        name: 'Cardiology',
        code: 'CARDIO',
        description: 'Heart and blood vessel disorders',
        isActive: true,
        requiredSkills: ['CPR', 'ECG'],
        createdAt: new Date(),
        updatedAt: new Date()
      };

      expect(specialty.id).toBe(1);
      expect(specialty.name).toBe('Cardiology');
      expect(specialty.code).toBe('CARDIO');
      expect(specialty.description).toBe('Heart and blood vessel disorders');
      expect(specialty.isActive).toBe(true);
      expect(Array.isArray(specialty.requiredSkills)).toBe(true);
      expect(specialty.requiredSkills).toContain('CPR');
      expect(specialty.createdAt).toBeInstanceOf(Date);
      expect(specialty.updatedAt).toBeInstanceOf(Date);
    });

    it('should handle optional fields', () => {
      const minimalSpecialty: Partial<Specialty> = {
        name: 'Anesthesia',
        code: 'ANESTH',
        isActive: true
      };

      expect(minimalSpecialty.name).toBe('Anesthesia');
      expect(minimalSpecialty.code).toBe('ANESTH');
      expect(minimalSpecialty.isActive).toBe(true);
    });
  });

  describe('CreateSpecialtyRequest interface', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should define creation request structure', () => {
      const createRequest: CreateSpecialtyRequest = {
        name: 'Neurology',
        code: 'NEURO',
        description: 'Nervous system disorders',
        requiredSkills: ['Neurological Assessment', 'EEG']
      };

      expect(createRequest.name).toBe('Neurology');
      expect(createRequest.code).toBe('NEURO');
      expect(createRequest.description).toBe('Nervous system disorders');
      expect(Array.isArray(createRequest.requiredSkills)).toBe(true);
      expect(createRequest.requiredSkills).toHaveLength(2);
    });

    it('should allow minimal creation data', () => {
      const minimalRequest: Partial<CreateSpecialtyRequest> = {
        name: 'Emergency Medicine',
        code: 'EM'
      };

      expect(minimalRequest.name).toBe('Emergency Medicine');
      expect(minimalRequest.code).toBe('EM');
    });
  });

  describe('Specialty validation', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should validate specialty codes', () => {
      const validCodes = ['CARDIO', 'NEURO', 'ANESTH', 'ORTHO'];
      
      validCodes.forEach(code => {
        expect(typeof code).toBe('string');
        expect(code.length).toBeGreaterThan(0);
        expect(code).toBe(code.toUpperCase()); // Should be uppercase
      });
    });

    it('should validate required skills array', () => {
      const skills = ['Skill1', 'Skill2', 'Skill3'];
      
      expect(Array.isArray(skills)).toBe(true);
      skills.forEach(skill => {
        expect(typeof skill).toBe('string');
        expect(skill.length).toBeGreaterThan(0);
      });
    });
  });

  describe('Medical specialty examples', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

    it('should handle common medical specialties', () => {
      const commonSpecialties = [
        { name: 'Anesthesiology', code: 'ANESTH' },
        { name: 'Surgery', code: 'SURG' },
        { name: 'Internal Medicine', code: 'IM' },
        { name: 'Pediatrics', code: 'PEDS' }
      ];

      commonSpecialties.forEach(specialty => {
        expect(specialty.name).toBeDefined();
        expect(specialty.code).toBeDefined();
        expect(typeof specialty.name).toBe('string');
        expect(typeof specialty.code).toBe('string');
      });
    });
  });
});
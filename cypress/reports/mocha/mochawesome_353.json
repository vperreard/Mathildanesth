{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-05-22T09:19:03.127Z",
    "end": "2025-05-22T09:19:14.195Z",
    "duration": 11068,
    "testsRegistered": 3,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "b868e729-d5e1-483a-97bd-757245c38adc",
      "title": "",
      "fullFile": "cypress/e2e/performance/benchmark.cy.js",
      "file": "cypress/e2e/performance/benchmark.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "665dd578-fad9-4348-a085-cec8420616de",
          "title": "Benchmark de performances",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Mesure les temps de chargement des pages principales",
              "fullTitle": "Benchmark de performances Mesure les temps de chargement des pages principales",
              "timedOut": null,
              "duration": 10891,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const pages = ['/', '/utilisateurs', '/calendrier', '/planning/hebdomadaire', '/conges', '/parametres'];\n// Tester chaque page\npages.forEach(page => {\n  // Mesurer le temps de navigation complet\n  const startTime = Date.now();\n  cy.visit(page, {\n    failOnStatusCode: false,\n    timeout: 30000\n  });\n  cy.get('main', {\n    timeout: 30000\n  }).should('be.visible');\n  // Vérifier que la page est entièrement chargée (pas de spinners/loaders)\n  cy.get('[data-loading=\"true\"]').should('not.exist', {\n    timeout: 15000\n  });\n  cy.window().then(() => {\n    const loadTime = Date.now() - startTime;\n    // Enregistrer la métrique\n    cy.task('logPerformance', {\n      type: 'page',\n      name: page,\n      duration: loadTime,\n      timestamp: Date.now()\n    });\n    // Montrer le résultat\n    cy.log(`📊 ${page}: ${loadTime}ms`);\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `[data-test=login-email]`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Benchmark de performances`",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `[data-test=login-email]`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Benchmark de performances`\n    at Context.eval (webpack://mathildanesth/./cypress/e2e/performance/benchmark.cy.js:19:62)",
                "diff": null
              },
              "uuid": "b90c6e5e-849f-4393-beee-44ea0b0b867c",
              "parentUUID": "665dd578-fad9-4348-a085-cec8420616de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mesure les temps de chargement des formulaires",
              "fullTitle": "Benchmark de performances Mesure les temps de chargement des formulaires",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test du formulaire utilisateur\ncy.visit('/utilisateurs', {\n  failOnStatusCode: false,\n  timeout: 30000\n});\ncy.contains('button', 'Nouvel Utilisateur', {\n  timeout: 10000\n}).click();\nconst startTimeForm = Date.now();\ncy.get('form', {\n  timeout: 10000\n}).should('be.visible');\ncy.window().then(() => {\n  const formLoadTime = Date.now() - startTimeForm;\n  cy.task('logPerformance', {\n    type: 'form',\n    name: 'user-create-form',\n    duration: formLoadTime,\n    timestamp: Date.now()\n  });\n  cy.log(`📝 Formulaire Utilisateur: ${formLoadTime}ms`);\n});\n// Ajouter d'autres formulaires selon vos besoins...",
              "err": {},
              "uuid": "9d83da55-94c3-476e-bc7a-ca70d5943d8b",
              "parentUUID": "665dd578-fad9-4348-a085-cec8420616de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Mesure les temps de réponse des API principales",
              "fullTitle": "Benchmark de performances Mesure les temps de réponse des API principales",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test des principales API\nconst apiEndpoints = ['/api/utilisateurs', '/api/conges/types', '/api/planning', '/api/skills', '/api/notifications/preferences'];\napiEndpoints.forEach(endpoint => {\n  cy.request({\n    url: endpoint,\n    failOnStatusCode: false\n  }).then(response => {\n    cy.task('logPerformance', {\n      type: 'api',\n      name: endpoint,\n      duration: response.duration,\n      status: response.status,\n      timestamp: Date.now()\n    });\n    cy.log(`🔌 API ${endpoint}: ${response.duration}ms (${response.status})`);\n  });\n});",
              "err": {},
              "uuid": "00b0122a-cd46-4e7a-aa06-01f07a89d2e9",
              "parentUUID": "665dd578-fad9-4348-a085-cec8420616de",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b90c6e5e-849f-4393-beee-44ea0b0b867c"
          ],
          "pending": [],
          "skipped": [
            "9d83da55-94c3-476e-bc7a-ca70d5943d8b",
            "00b0122a-cd46-4e7a-aa06-01f07a89d2e9"
          ],
          "duration": 10891,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}
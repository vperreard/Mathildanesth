{
  "stats": {
    "suites": 2,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-06-01T05:47:13.742Z",
    "end": "2025-06-01T05:47:18.083Z",
    "duration": 4341,
    "testsRegistered": 19,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 18,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "96291ee5-f3cb-4cf6-940f-6857419b379d",
      "title": "",
      "fullFile": "cypress/e2e/bloc-operatoire/bloc-planning-management.spec.ts",
      "file": "cypress/e2e/bloc-operatoire/bloc-planning-management.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "364dc997-0139-48bc-a3b1-de1040c96297",
          "title": "Gestion des plannings bloc opératoire",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4bcd6b17-9591-4f92-9809-8ba4fe58bd00",
              "title": "Visualisation du planning",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "affiche correctement la vue hebdomadaire du planning",
                  "fullTitle": "Gestion des plannings bloc opératoire Visualisation du planning affiche correctement la vue hebdomadaire du planning",
                  "timedOut": null,
                  "duration": 465,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Vérifier les éléments principaux\ncy.get('[data-testid=planning-header]').should('be.visible');\ncy.get('[data-testid=week-selector]').should('be.visible');\ncy.get('[data-testid=planning-grid]').should('be.visible');\n// Vérifier l'affichage des salles d'opération\ncy.get('[data-testid=operating-rooms-list]').within(function () {\n    cy.contains('Salle 1').should('exist');\n    cy.contains('Salle 2').should('exist');\n    cy.contains('Salle Urgences').should('exist');\n});\n// Vérifier l'affichage des jours de la semaine\nvar jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];\njours.forEach(function (jour) {\n    cy.get('[data-testid=planning-grid]').contains(jour).should('exist');\n});",
                  "err": {
                    "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttp://localhost:3000/bloc-operatoire\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Gestion des plannings bloc ...`",
                    "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttp://localhost:3000/bloc-operatoire\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Gestion des plannings bloc ...`\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:133710:76)\n    at visitFailedByErr (http://localhost:3000/__cypress/runner/cypress_runner.js:133116:12)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:133693:13)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:1667:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://mathildanesth/./cypress/support/commands.ts:190:7)\n    at wrapped (http://localhost:3000/__cypress/runner/cypress_runner.js:140165:43)",
                    "diff": null
                  },
                  "uuid": "df0d312e-f4ae-4b1b-979f-f2775e0ee6e1",
                  "parentUUID": "4bcd6b17-9591-4f92-9809-8ba4fe58bd00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "permet de naviguer entre les semaines",
                  "fullTitle": "Gestion des plannings bloc opératoire Visualisation du planning permet de naviguer entre les semaines",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Noter la semaine actuelle\ncy.get('[data-testid=current-week-label]')\n    .invoke('text')\n    .then(function (currentWeek) {\n    // Aller à la semaine suivante\n    cy.get('[data-testid=next-week-button]').click();\n    // Vérifier que la semaine a changé\n    cy.get('[data-testid=current-week-label]')\n        .invoke('text')\n        .should('not.equal', currentWeek);\n    // Revenir à la semaine précédente\n    cy.get('[data-testid=prev-week-button]').click();\n    // Vérifier qu'on est revenu à la semaine initiale\n    cy.get('[data-testid=current-week-label]')\n        .invoke('text')\n        .should('equal', currentWeek);\n});",
                  "err": {},
                  "uuid": "463889ce-4223-483b-9a27-22822f1b0c81",
                  "parentUUID": "4bcd6b17-9591-4f92-9809-8ba4fe58bd00",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "permet de filtrer par secteur",
                  "fullTitle": "Gestion des plannings bloc opératoire Visualisation du planning permet de filtrer par secteur",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Sélectionner un secteur spécifique\ncy.get('[data-testid=sector-filter]').select('Chirurgie');\n// Vérifier que seules les salles du secteur sont affichées\ncy.get('[data-testid=operating-rooms-list]').within(function () {\n    cy.contains('Salle 1').should('exist');\n    cy.contains('Salle 2').should('exist');\n    cy.contains('Endoscopie').should('not.exist');\n});",
                  "err": {},
                  "uuid": "2c2ccaee-a092-43f5-90c5-66dda083aa36",
                  "parentUUID": "4bcd6b17-9591-4f92-9809-8ba4fe58bd00",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "df0d312e-f4ae-4b1b-979f-f2775e0ee6e1"
              ],
              "pending": [],
              "skipped": [
                "463889ce-4223-483b-9a27-22822f1b0c81",
                "2c2ccaee-a092-43f5-90c5-66dda083aa36"
              ],
              "duration": 465,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2b1aee4-b2de-48c2-99b3-548691dc2a18",
              "title": "Création d'affectations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "permet de créer une affectation par glisser-déposer",
                  "fullTitle": "Gestion des plannings bloc opératoire Création d'affectations permet de créer une affectation par glisser-déposer",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Sélectionner un chirurgien dans la liste\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .as('surgeon');\n// Glisser-déposer sur un créneau\ncy.get('@surgeon').drag('[data-testid=slot-monday-morning-room1]');\n// Vérifier que l'affectation est créée\ncy.get('[data-testid=slot-monday-morning-room1]').within(function () {\n    cy.contains('Dr Dupont').should('exist');\n    cy.get('[data-testid=assignment-badge]').should('have.class', 'assigned');\n});\n// Vérifier la notification de succès\ncy.get('[data-testid=notification-success]')\n    .should('be.visible')\n    .and('contain', 'Affectation créée avec succès');",
                  "err": {},
                  "uuid": "589af37e-8e4d-42fd-8e07-4c203a94fd1f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "permet de créer une affectation via le formulaire",
                  "fullTitle": "Gestion des plannings bloc opératoire Création d'affectations permet de créer une affectation via le formulaire",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Cliquer sur un créneau vide\ncy.get('[data-testid=slot-tuesday-afternoon-room2]').click();\n// Remplir le formulaire d'affectation\ncy.get('[data-testid=assignment-modal]').within(function () {\n    cy.get('[data-testid=surgeon-select]').select('Dr Martin');\n    cy.get('[data-testid=specialty-select]').select('Orthopédie');\n    cy.get('[data-testid=assignment-type]').select('Intervention');\n    cy.get('[data-testid=notes-input]').type('Prothèse de hanche');\n    cy.get('[data-testid=submit-assignment]').click();\n});\n// Vérifier que l'affectation est créée\ncy.get('[data-testid=slot-tuesday-afternoon-room2]').within(function () {\n    cy.contains('Dr Martin').should('exist');\n    cy.contains('Orthopédie').should('exist');\n});",
                  "err": {},
                  "uuid": "9d27af96-9c90-4dca-817e-a044191b44b6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "valide les règles métier lors de la création",
                  "fullTitle": "Gestion des plannings bloc opératoire Création d'affectations valide les règles métier lors de la création",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Essayer d'affecter un chirurgien déjà occupé\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .drag('[data-testid=slot-monday-morning-room1]');\n// Essayer de l'affecter à nouveau au même moment\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .drag('[data-testid=slot-monday-morning-room2]');\n// Vérifier l'avertissement de conflit\ncy.get('[data-testid=conflict-warning]')\n    .should('be.visible')\n    .and('contain', 'Dr Dupont est déjà affecté à ce créneau');",
                  "err": {},
                  "uuid": "ca102c3a-d1cb-4859-9c5d-c82765fae4dd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "vérifie les compétences pour les salles spécialisées",
                  "fullTitle": "Gestion des plannings bloc opératoire Création d'affectations vérifie les compétences pour les salles spécialisées",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Essayer d'affecter un chirurgien non qualifié en endoscopie\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Orthopédiste')\n    .drag('[data-testid=slot-wednesday-morning-endoscopy]');\n// Vérifier l'avertissement de compétence\ncy.get('[data-testid=skill-warning]')\n    .should('be.visible')\n    .and('contain', 'Dr Orthopédiste n\\'est pas qualifié pour l\\'endoscopie');",
                  "err": {},
                  "uuid": "10a8958b-df0f-483a-92d9-23401303c564",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "589af37e-8e4d-42fd-8e07-4c203a94fd1f",
                "9d27af96-9c90-4dca-817e-a044191b44b6",
                "ca102c3a-d1cb-4859-9c5d-c82765fae4dd",
                "10a8958b-df0f-483a-92d9-23401303c564"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b13d946-111f-4579-b1c1-0470c9f05177",
              "title": "Modification d'affectations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "permet de modifier une affectation existante",
                  "fullTitle": "Gestion des plannings bloc opératoire Modification d'affectations permet de modifier une affectation existante",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Créer d'abord une affectation\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .drag('[data-testid=slot-thursday-morning-room1]');\n// Double-cliquer pour modifier\ncy.get('[data-testid=slot-thursday-morning-room1]').dblclick();\n// Modifier les détails\ncy.get('[data-testid=assignment-modal]').within(function () {\n    cy.get('[data-testid=specialty-select]').select('Neurochirurgie');\n    cy.get('[data-testid=notes-input]').clear().type('Intervention modifiée');\n    cy.get('[data-testid=update-assignment]').click();\n});\n// Vérifier les modifications\ncy.get('[data-testid=slot-thursday-morning-room1]').within(function () {\n    cy.contains('Neurochirurgie').should('exist');\n});",
                  "err": {},
                  "uuid": "1ec12c24-9608-40c6-8be0-f85c573dfd20",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "permet de déplacer une affectation par glisser-déposer",
                  "fullTitle": "Gestion des plannings bloc opératoire Modification d'affectations permet de déplacer une affectation par glisser-déposer",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Créer une affectation\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Martin')\n    .drag('[data-testid=slot-friday-morning-room1]');\n// Déplacer l'affectation vers un autre créneau\ncy.get('[data-testid=slot-friday-morning-room1]')\n    .find('[data-testid=assignment-badge]')\n    .drag('[data-testid=slot-friday-afternoon-room2]');\n// Vérifier le déplacement\ncy.get('[data-testid=slot-friday-morning-room1]')\n    .should('not.contain', 'Dr Martin');\ncy.get('[data-testid=slot-friday-afternoon-room2]')\n    .should('contain', 'Dr Martin');",
                  "err": {},
                  "uuid": "79a233de-bf79-4a00-a69a-a3e3f1ec7d30",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "propose des créneaux alternatifs en cas de conflit",
                  "fullTitle": "Gestion des plannings bloc opératoire Modification d'affectations propose des créneaux alternatifs en cas de conflit",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Créer deux affectations\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .drag('[data-testid=slot-monday-morning-room1]');\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Martin')\n    .drag('[data-testid=slot-monday-morning-room2]');\n// Essayer de déplacer la première sur la seconde\ncy.get('[data-testid=slot-monday-morning-room1]')\n    .find('[data-testid=assignment-badge]')\n    .drag('[data-testid=slot-monday-morning-room2]');\n// Vérifier les suggestions\ncy.get('[data-testid=alternative-slots-modal]').within(function () {\n    cy.contains('Créneaux alternatifs disponibles').should('exist');\n    cy.get('[data-testid=alternative-slot]').should('have.length.greaterThan', 0);\n    // Choisir une alternative\n    cy.get('[data-testid=alternative-slot]').first().click();\n});",
                  "err": {},
                  "uuid": "cc2ac608-56df-477c-b998-2b039ac1d2fe",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "1ec12c24-9608-40c6-8be0-f85c573dfd20",
                "79a233de-bf79-4a00-a69a-a3e3f1ec7d30",
                "cc2ac608-56df-477c-b998-2b039ac1d2fe"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c3e58c9-e243-4da9-ad5c-b8a9f73ffcce",
              "title": "Suppression d'affectations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "permet de supprimer une affectation",
                  "fullTitle": "Gestion des plannings bloc opératoire Suppression d'affectations permet de supprimer une affectation",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Créer une affectation\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .drag('[data-testid=slot-wednesday-morning-room1]');\n// Cliquer droit pour supprimer\ncy.get('[data-testid=slot-wednesday-morning-room1]')\n    .find('[data-testid=assignment-badge]')\n    .rightclick();\ncy.get('[data-testid=context-menu]')\n    .contains('Supprimer')\n    .click();\n// Confirmer la suppression\ncy.get('[data-testid=confirm-delete-modal]').within(function () {\n    cy.get('[data-testid=confirm-delete-button]').click();\n});\n// Vérifier la suppression\ncy.get('[data-testid=slot-wednesday-morning-room1]')\n    .should('not.contain', 'Dr Dupont');",
                  "err": {},
                  "uuid": "4aacb61e-bdc5-449b-b572-b080bb7e0eb6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "permet de supprimer plusieurs affectations en lot",
                  "fullTitle": "Gestion des plannings bloc opératoire Suppression d'affectations permet de supprimer plusieurs affectations en lot",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Créer plusieurs affectations\n['room1', 'room2', 'room3'].forEach(function (room, index) {\n    cy.get('[data-testid=surgeons-list]')\n        .contains(\"Dr Test\".concat(index + 1))\n        .drag(\"[data-testid=slot-thursday-morning-\".concat(room, \"]\"));\n});\n// Activer le mode sélection multiple\ncy.get('[data-testid=multi-select-toggle]').click();\n// Sélectionner plusieurs affectations\ncy.get('[data-testid^=slot-thursday-morning]')\n    .find('[data-testid=assignment-badge]')\n    .click({ multiple: true });\n// Supprimer en lot\ncy.get('[data-testid=bulk-delete-button]').click();\ncy.get('[data-testid=confirm-bulk-delete-button]').click();\n// Vérifier la suppression\n['room1', 'room2', 'room3'].forEach(function (room) {\n    cy.get(\"[data-testid=slot-thursday-morning-\".concat(room, \"]\"))\n        .should('be.empty');\n});",
                  "err": {},
                  "uuid": "97d50b38-2f75-49c5-a117-25b22d34f367",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "4aacb61e-bdc5-449b-b572-b080bb7e0eb6",
                "97d50b38-2f75-49c5-a117-25b22d34f367"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7eec4d04-5ae3-4097-82a9-cb8fce3202e2",
              "title": "Validation des règles métier",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "vérifie la règle de supervision pour les internes",
                  "fullTitle": "Gestion des plannings bloc opératoire Validation des règles métier vérifie la règle de supervision pour les internes",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Affecter un interne seul\ncy.get('[data-testid=surgeons-list]')\n    .contains('Interne Durand')\n    .drag('[data-testid=slot-monday-morning-room1]');\n// Vérifier l'avertissement de supervision\ncy.get('[data-testid=supervision-warning]')\n    .should('be.visible')\n    .and('contain', 'Un interne doit être supervisé par un senior');\n// Ajouter un senior\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Senior')\n    .drag('[data-testid=slot-monday-morning-room1]');\n// Vérifier que l'avertissement disparaît\ncy.get('[data-testid=supervision-warning]').should('not.exist');",
                  "err": {},
                  "uuid": "00233782-5eed-4344-aedb-492239fe9219",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "vérifie les temps de repos obligatoires",
                  "fullTitle": "Gestion des plannings bloc opératoire Validation des règles métier vérifie les temps de repos obligatoires",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Affecter un chirurgien en garde de nuit\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .drag('[data-testid=slot-sunday-night-emergency]');\n// Essayer de l'affecter le lendemain matin\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .drag('[data-testid=slot-monday-morning-room1]');\n// Vérifier l'avertissement de repos\ncy.get('[data-testid=rest-time-warning]')\n    .should('be.visible')\n    .and('contain', 'Temps de repos insuffisant après une garde');",
                  "err": {},
                  "uuid": "823da0c2-41bd-4a04-b51d-353d04440b8b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "vérifie le nombre maximum d'heures hebdomadaires",
                  "fullTitle": "Gestion des plannings bloc opératoire Validation des règles métier vérifie le nombre maximum d'heures hebdomadaires",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Affecter un chirurgien sur de nombreux créneaux\nvar slots = [\n    'monday-morning', 'monday-afternoon',\n    'tuesday-morning', 'tuesday-afternoon',\n    'wednesday-morning', 'wednesday-afternoon',\n    'thursday-morning', 'thursday-afternoon',\n    'friday-morning', 'friday-afternoon'\n];\nslots.forEach(function (slot) {\n    cy.get('[data-testid=surgeons-list]')\n        .contains('Dr Workaholic')\n        .drag(\"[data-testid=slot-\".concat(slot, \"-room1]\"));\n});\n// Vérifier l'avertissement de dépassement d'heures\ncy.get('[data-testid=hours-limit-warning]')\n    .should('be.visible')\n    .and('contain', 'Limite d\\'heures hebdomadaires dépassée');",
                  "err": {},
                  "uuid": "ef818a0c-9c38-4e79-b060-0fa98578061a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "00233782-5eed-4344-aedb-492239fe9219",
                "823da0c2-41bd-4a04-b51d-353d04440b8b",
                "ef818a0c-9c38-4e79-b060-0fa98578061a"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b46966e-48a7-4292-adf8-8bbba6971c26",
              "title": "Fonctionnalités avancées",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "permet de copier le planning d'une semaine",
                  "fullTitle": "Gestion des plannings bloc opératoire Fonctionnalités avancées permet de copier le planning d'une semaine",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Créer quelques affectations\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Dupont')\n    .drag('[data-testid=slot-monday-morning-room1]');\ncy.get('[data-testid=surgeons-list]')\n    .contains('Dr Martin')\n    .drag('[data-testid=slot-tuesday-afternoon-room2]');\n// Copier le planning\ncy.get('[data-testid=planning-actions-menu]').click();\ncy.get('[data-testid=copy-week-planning]').click();\n// Aller à la semaine suivante\ncy.get('[data-testid=next-week-button]').click();\n// Coller le planning\ncy.get('[data-testid=planning-actions-menu]').click();\ncy.get('[data-testid=paste-week-planning]').click();\n// Vérifier que les affectations sont copiées\ncy.get('[data-testid=slot-monday-morning-room1]')\n    .should('contain', 'Dr Dupont');\ncy.get('[data-testid=slot-tuesday-afternoon-room2]')\n    .should('contain', 'Dr Martin');",
                  "err": {},
                  "uuid": "3ac5b98c-c193-4751-82c0-99b890e45761",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "permet d'exporter le planning en PDF",
                  "fullTitle": "Gestion des plannings bloc opératoire Fonctionnalités avancées permet d'exporter le planning en PDF",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Ouvrir le menu d'export\ncy.get('[data-testid=export-planning-button]').click();\n// Configurer l'export\ncy.get('[data-testid=export-modal]').within(function () {\n    cy.get('[data-testid=export-format-pdf]').check();\n    cy.get('[data-testid=include-notes]').check();\n    cy.get('[data-testid=export-confirm]').click();\n});\n// Vérifier le téléchargement\ncy.readFile('cypress/downloads/planning-bloc-operatoire.pdf')\n    .should('exist');",
                  "err": {},
                  "uuid": "6eaf4907-6149-4722-b16b-d4799721dae7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "affiche les statistiques du planning",
                  "fullTitle": "Gestion des plannings bloc opératoire Fonctionnalités avancées affiche les statistiques du planning",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Créer plusieurs affectations\n// ... (affectations créées)\n// Ouvrir les statistiques\ncy.get('[data-testid=planning-stats-button]').click();\n// Vérifier l'affichage des statistiques\ncy.get('[data-testid=stats-modal]').within(function () {\n    cy.contains('Taux d\\'occupation').should('exist');\n    cy.contains('Heures par chirurgien').should('exist');\n    cy.contains('Répartition par spécialité').should('exist');\n    cy.get('[data-testid=occupation-chart]').should('be.visible');\n});",
                  "err": {},
                  "uuid": "30ce6b3c-85c8-4945-91ea-036d5319e802",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "permet de générer un planning automatique",
                  "fullTitle": "Gestion des plannings bloc opératoire Fonctionnalités avancées permet de générer un planning automatique",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Ouvrir l'assistant de génération\ncy.get('[data-testid=auto-generate-button]').click();\n// Configurer les paramètres\ncy.get('[data-testid=generation-modal]').within(function () {\n    cy.get('[data-testid=respect-preferences]').check();\n    cy.get('[data-testid=balance-workload]').check();\n    cy.get('[data-testid=optimize-skills]').check();\n    cy.get('[data-testid=generate-planning]').click();\n});\n// Attendre la génération\ncy.get('[data-testid=generation-progress]').should('be.visible');\ncy.get('[data-testid=generation-complete]', { timeout: 30000 })\n    .should('be.visible');\n// Vérifier que des affectations ont été créées\ncy.get('[data-testid^=slot-]')\n    .find('[data-testid=assignment-badge]')\n    .should('have.length.greaterThan', 10);",
                  "err": {},
                  "uuid": "fb3aa796-3253-4d87-83f7-d1021d770eb2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3ac5b98c-c193-4751-82c0-99b890e45761",
                "6eaf4907-6149-4722-b16b-d4799721dae7",
                "30ce6b3c-85c8-4945-91ea-036d5319e802",
                "fb3aa796-3253-4d87-83f7-d1021d770eb2"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}
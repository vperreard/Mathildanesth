import { PrismaClient } from '@prisma/client';
import { defaultRuleTemplates } from '../src/lib/default-rule-templates';

const prisma = new PrismaClient();

async function seedDefaultRules() {
  console.log('üöÄ Cr√©ation des r√®gles par d√©faut du syst√®me...\n');

  try {
    // 1. R√®gles de validation des gardes
    const gardeRules = [
      {
        name: 'Intervalle minimum entre gardes',
        description: 'Assure un repos minimum de 3 jours entre deux gardes de 24h',
        type: 'validation',
        priority: 90,
        status: 'active',
        conditions: {
          type: 'group',
          operator: 'AND',
          conditions: [
            {
              field: 'assignment.type',
              operator: 'equals',
              value: 'GARDE_24H'
            },
            {
              field: 'user.lastGuardDate',
              operator: 'greater',
              value: 'date.minus(3days)'
            }
          ]
        },
        actions: [
          {
            type: 'validate',
            parameters: {
              severity: 'error',
              message: 'Un minimum de 3 jours est requis entre deux gardes de 24h',
              violationType: 'MIN_INTERVAL'
            }
          }
        ],
        createdBy: 'system'
      },
      {
        name: 'Garde minimale week-end',
        description: 'Assure la pr√©sence d\'au moins 2 seniors les week-ends',
        type: 'generation',
        priority: 85,
        status: 'active',
        conditions: {
          type: 'group',
          operator: 'AND',
          conditions: [
            {
              field: 'date.dayOfWeek',
              operator: 'in',
              value: [0, 6] // Dimanche, Samedi
            },
            {
              field: 'planning.seniorCount',
              operator: 'less',
              value: 2
            }
          ]
        },
        actions: [
          {
            type: 'assign',
            parameters: {
              assignmentType: 'GARDE',
              shiftType: 'GARDE_24H',
              userCriteria: {
                experience: 'senior',
                available: true
              },
              count: 2
            }
          }
        ],
        createdBy: 'system'
      }
    ];

    // 2. R√®gles de fatigue
    const fatigueRules = [
      {
        name: 'Limite de fatigue critique',
        description: 'Bloque les affectations si le score de fatigue d√©passe le seuil critique',
        type: 'validation',
        priority: 95,
        status: 'active',
        conditions: {
          field: 'metrics.fatigueScore',
          operator: 'greater',
          value: 80
        },
        actions: [
          {
            type: 'validate',
            parameters: {
              severity: 'error',
              message: 'Score de fatigue critique atteint. Repos obligatoire.',
              violationType: 'FATIGUE'
            }
          }
        ],
        createdBy: 'system'
      },
      {
        name: 'Alerte fatigue √©lev√©e',
        description: 'Avertit quand le score de fatigue est √©lev√©',
        type: 'validation',
        priority: 70,
        status: 'active',
        conditions: {
          field: 'metrics.fatigueScore',
          operator: 'between',
          value: [60, 80]
        },
        actions: [
          {
            type: 'validate',
            parameters: {
              severity: 'warning',
              message: 'Attention: Score de fatigue √©lev√©',
              violationType: 'FATIGUE_WARNING'
            }
          }
        ],
        createdBy: 'system'
      }
    ];

    // 3. R√®gles de cong√©s
    const leaveRules = [
      {
        name: 'Limite cong√©s p√©riode critique',
        description: 'Limite le nombre de cong√©s simultan√©s pendant les p√©riodes critiques',
        type: 'validation',
        priority: 80,
        status: 'active',
        conditions: {
          type: 'group',
          operator: 'AND',
          conditions: [
            {
              field: 'leave.type',
              operator: 'equals',
              value: 'CONGE_ANNUEL'
            },
            {
              field: 'date.period',
              operator: 'in',
              value: ['NOEL', 'NOUVEL_AN', 'ETE']
            },
            {
              field: 'planning.leaveCount',
              operator: 'greater',
              value: 2
            }
          ]
        },
        actions: [
          {
            type: 'validate',
            parameters: {
              severity: 'warning',
              message: 'P√©riode critique: nombre de cong√©s simultan√©s √©lev√©',
              violationType: 'CRITICAL_PERIOD'
            }
          },
          {
            type: 'notify',
            parameters: {
              suggestion: 'Consid√©rez une p√©riode alternative pour maintenir la couverture'
            }
          }
        ],
        createdBy: 'system'
      },
      {
        name: 'Validation quota cong√©s',
        description: 'V√©rifie que le quota de cong√©s n\'est pas d√©pass√©',
        type: 'validation',
        priority: 90,
        status: 'active',
        conditions: {
          type: 'group',
          operator: 'AND',
          conditions: [
            {
              field: 'leave.duration',
              operator: 'greater',
              value: 0
            },
            {
              field: 'metrics.remainingQuota',
              operator: 'less',
              value: 'leave.duration'
            }
          ]
        },
        actions: [
          {
            type: 'validate',
            parameters: {
              severity: 'error',
              message: 'Quota de cong√©s insuffisant',
              violationType: 'QUOTA_EXCEEDED'
            }
          }
        ],
        createdBy: 'system'
      }
    ];

    // 4. R√®gles bloc op√©ratoire
    const blocRules = [
      {
        name: 'Supervision salles sp√©cialis√©es',
        description: 'Assure la pr√©sence de praticiens qualifi√©s pour les salles sp√©cialis√©es',
        type: 'validation',
        priority: 85,
        status: 'active',
        conditions: {
          type: 'group',
          operator: 'AND',
          conditions: [
            {
              field: 'assignment.location',
              operator: 'contains',
              value: ['Neurochirurgie', 'Cardiologie', 'Chirurgie vasculaire']
            },
            {
              field: 'user.specialty',
              operator: 'not_equals',
              value: 'assignment.requiredSpecialty'
            }
          ]
        },
        actions: [
          {
            type: 'validate',
            parameters: {
              severity: 'error',
              message: 'Sp√©cialit√© requise non correspondante',
              violationType: 'SPECIALTY_MISMATCH'
            }
          }
        ],
        createdBy: 'system'
      },
      {
        name: 'Ratio supervision junior/senior',
        description: 'Maintient un √©quilibre entre juniors et seniors',
        type: 'generation',
        priority: 75,
        status: 'active',
        conditions: {
          type: 'group',
          operator: 'AND',
          conditions: [
            {
              field: 'planning.juniorRatio',
              operator: 'greater',
              value: 0.5
            },
            {
              field: 'assignment.type',
              operator: 'equals',
              value: 'BLOC'
            }
          ]
        },
        actions: [
          {
            type: 'assign',
            parameters: {
              assignmentType: 'BLOC',
              userCriteria: {
                experience: 'senior',
                available: true
              },
              priority: 'high'
            }
          }
        ],
        createdBy: 'system'
      }
    ];

    // 5. R√®gles d'√©quit√©
    const equityRules = [
      {
        name: '√âquilibrage des gardes',
        description: 'Favorise les praticiens avec moins de gardes',
        type: 'generation',
        priority: 60,
        status: 'active',
        conditions: {
          field: 'assignment.type',
          operator: 'equals',
          value: 'GARDE'
        },
        actions: [
          {
            type: 'assign',
            parameters: {
              userCriteria: {
                sortBy: 'gardeCount',
                order: 'asc',
                available: true
              }
            }
          }
        ],
        createdBy: 'system'
      }
    ];

    // Cr√©er toutes les r√®gles
    const allRules = [
      ...gardeRules,
      ...fatigueRules,
      ...leaveRules,
      ...blocRules,
      ...equityRules
    ];

    for (const rule of allRules) {
      const existing = await prisma.planningRule.findFirst({
        where: { name: rule.name }
      });

      if (!existing) {
        const created = await prisma.planningRule.create({
          data: {
            ...rule,
            conditions: rule.conditions as any,
            actions: rule.actions as any,
            metadata: {
              category: rule.type === 'validation' ? 'Validation' : 'G√©n√©ration',
              tags: [],
              isDefault: true
            }
          }
        });

        // Cr√©er les m√©triques associ√©es
        await prisma.ruleMetrics.create({
          data: {
            ruleId: created.id,
            executionCount: 0,
            successCount: 0,
            failureCount: 0,
            avgExecutionTime: 0,
            impactScore: 0
          }
        });

        console.log(`‚úÖ R√®gle cr√©√©e: ${rule.name}`);
      } else {
        console.log(`‚è≠Ô∏è  R√®gle existante: ${rule.name}`);
      }
    }

    // Cr√©er √©galement les templates par d√©faut
    console.log('\nüìã Cr√©ation des mod√®les de r√®gles...\n');
    
    for (const template of defaultRuleTemplates) {
      const existing = await prisma.planningRuleTemplate.findFirst({
        where: { name: template.name }
      });

      if (!existing) {
        await prisma.planningRuleTemplate.create({
          data: template
        });
        console.log(`‚úÖ Mod√®le cr√©√©: ${template.name}`);
      } else {
        console.log(`‚è≠Ô∏è  Mod√®le existant: ${template.name}`);
      }
    }

    console.log('\n‚úÖ R√®gles et mod√®les par d√©faut cr√©√©s avec succ√®s!');
    console.log(`üìä Total: ${allRules.length} r√®gles, ${defaultRuleTemplates.length} mod√®les`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des r√®gles:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

seedDefaultRules().catch(console.error);
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Validation des r√®gles Cursor...\n');

// Lire la configuration principale
const configPath = '.cursor-config.json';
if (!fs.existsSync(configPath)) {
    console.error('‚ùå Fichier .cursor-config.json non trouv√©');
    process.exit(1);
}

const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
let allValid = true;

// Valider chaque r√®gle
for (const rule of config.rules) {
    console.log(`üìã R√®gle: ${rule.name}`);

    // V√©rifier que le fichier de r√®gle existe
    if (!fs.existsSync(rule.path)) {
        console.error(`   ‚ùå Fichier de r√®gle manquant: ${rule.path}`);
        allValid = false;
        continue;
    }

    // Lire le fichier de r√®gle
    try {
        const ruleContent = JSON.parse(fs.readFileSync(rule.path, 'utf8'));

        // V√©rifier les fichiers r√©f√©renc√©s dans les actions
        if (ruleContent.actions) {
            for (const action of ruleContent.actions) {
                if (action.type === 'readFiles' && action.files) {
                    for (const file of action.files) {
                        if (fs.existsSync(file)) {
                            console.log(`   ‚úÖ ${file}`);
                        } else {
                            console.error(`   ‚ùå Fichier manquant: ${file}`);
                            allValid = false;
                        }
                    }
                }
            }
        }
    } catch (error) {
        console.error(`   ‚ùå Erreur de parsing JSON: ${error.message}`);
        allValid = false;
    }

    console.log('');
}

// R√©sultat final
if (allValid) {
    console.log('üéâ Toutes les r√®gles Cursor sont valides !');
    process.exit(0);
} else {
    console.error('üí• Certaines r√®gles Cursor ont des probl√®mes');
    process.exit(1);
} 
#!/usr/bin/env node

/**
 * AUTO PROMPT GENERATOR V2.0
 * 
 * G√©n√©rateur intelligent de prompts Claude Code avec:
 * - Analyse en temps r√©el des √©checs
 * - Prompts batch optimis√©s 
 * - Auto-destruction apr√®s succ√®s
 * - Tracking de performance
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class AutoPromptGenerator {
    constructor() {
        this.workersDir = path.join(__dirname, '../claude-workers-prompts');
        this.maxPrompts = 5; // Limite pour √©viter l'overflow
        this.batchSize = 3; // Nombre de probl√®mes par prompt
    }

    async generateIntelligentPrompts() {
        console.log('üß† ANALYSE INTELLIGENTE DU PROJET...');
        
        // 1. Analyse rapide des probl√®mes critiques
        const issues = await this.detectCriticalIssues();
        
        // 2. Groupage intelligent des probl√®mes
        const batches = this.createOptimalBatches(issues);
        
        // 3. G√©n√©ration de prompts cibl√©s
        const prompts = this.generateBatchPrompts(batches);
        
        console.log(`‚ú® ${prompts.length} prompts intelligents g√©n√©r√©s`);
        
        return prompts;
    }

    async detectCriticalIssues() {
        const issues = [];
        
        console.log('üîç D√©tection des probl√®mes critiques...');
        
        // Tests en √©chec (rapide)
        try {
            const testResult = execSync('npm test -- --passWithNoTests --silent --maxWorkers=1 2>&1', { 
                encoding: 'utf8',
                timeout: 30000,
                cwd: path.join(__dirname, '..')
            });
            
            const testIssues = this.parseTestFailures(testResult);
            issues.push(...testIssues);
            
        } catch (error) {
            console.log('‚ö†Ô∏è Analyse des tests interrompue (timeout/erreur)');
        }

        // ESLint errors (rapide)
        try {
            const eslintResult = execSync('npx eslint src/ --format=json --quiet 2>/dev/null', {
                encoding: 'utf8',
                timeout: 15000,
                cwd: path.join(__dirname, '..')
            });
            
            const eslintIssues = this.parseEslintErrors(eslintResult);
            issues.push(...eslintIssues);
            
        } catch (error) {
            // Silence, ESLint peut √©chouer
        }

        // TypeScript errors (rapide)
        try {
            const tsResult = execSync('npx tsc --noEmit --skipLibCheck 2>&1', {
                encoding: 'utf8',
                timeout: 20000,
                cwd: path.join(__dirname, '..')
            });
            
            const tsIssues = this.parseTypeScriptErrors(tsResult);
            issues.push(...tsIssues);
            
        } catch (error) {
            // TypeScript errors sont dans stderr, c'est normal
            const tsIssues = this.parseTypeScriptErrors(error.stdout || error.message);
            issues.push(...tsIssues);
        }

        console.log(`üìä ${issues.length} probl√®mes d√©tect√©s`);
        return issues;
    }

    parseTestFailures(output) {
        const issues = [];
        const lines = output.split('\n');
        
        lines.forEach(line => {
            if (line.includes('FAIL ') && line.includes('.test.')) {
                const match = line.match(/FAIL\\s+(.+\\.test\\.[jt]sx?)/);
                if (match) {
                    issues.push({
                        type: 'test-failure',
                        file: match[1],
                        module: this.extractModule(match[1]),
                        priority: this.calculateTestPriority(match[1]),
                        description: `Test en √©chec: ${path.basename(match[1])}`
                    });
                }
            }
        });
        
        return issues;
    }

    parseEslintErrors(output) {
        const issues = [];
        
        try {
            const results = JSON.parse(output);
            
            results.forEach(file => {
                if (file.errorCount > 0) {
                    issues.push({
                        type: 'eslint-error',
                        file: file.filePath,
                        module: this.extractModule(file.filePath),
                        priority: 70,
                        count: file.errorCount,
                        description: `${file.errorCount} erreurs ESLint dans ${path.basename(file.filePath)}`
                    });
                }
            });
        } catch (e) {
            // JSON parsing failed, ignore
        }
        
        return issues;
    }

    parseTypeScriptErrors(output) {
        const issues = [];
        const lines = output.split('\n');
        
        const errorFiles = new Set();
        
        lines.forEach(line => {
            const match = line.match(/(.+\\.tsx?)\\(\\d+,\\d+\\): error TS\\d+:/);
            if (match) {
                const file = match[1];
                if (!errorFiles.has(file)) {
                    errorFiles.add(file);
                    issues.push({
                        type: 'typescript-error',
                        file,
                        module: this.extractModule(file),
                        priority: 80,
                        description: `Erreur TypeScript dans ${path.basename(file)}`
                    });
                }
            }
        });
        
        return issues;
    }

    extractModule(filePath) {
        if (filePath.includes('/leaves/')) return 'leaves';
        if (filePath.includes('/auth/')) return 'auth';
        if (filePath.includes('/services/')) return 'services';
        if (filePath.includes('/hooks/')) return 'hooks';
        if (filePath.includes('/components/')) return 'components';
        if (filePath.includes('/utils/')) return 'utils';
        if (filePath.includes('/types/')) return 'types';
        return 'other';
    }

    calculateTestPriority(testFile) {
        if (testFile.includes('auth')) return 100;
        if (testFile.includes('leaves')) return 95;
        if (testFile.includes('services')) return 90;
        if (testFile.includes('hooks')) return 85;
        if (testFile.includes('components')) return 80;
        return 70;
    }

    createOptimalBatches(issues) {
        // Grouper par module et type
        const grouped = issues.reduce((acc, issue) => {
            const key = `${issue.module}-${issue.type}`;
            if (!acc[key]) acc[key] = [];
            acc[key].push(issue);
            return acc;
        }, {});

        // Cr√©er des batches optimaux
        const batches = [];
        
        Object.entries(grouped).forEach(([key, groupIssues]) => {
            const [module, type] = key.split('-');
            
            // Diviser en chunks de taille optimale
            for (let i = 0; i < groupIssues.length; i += this.batchSize) {
                const chunk = groupIssues.slice(i, i + this.batchSize);
                
                batches.push({
                    id: `worker-${module}-${type}-batch${Math.floor(i / this.batchSize) + 1}`,
                    module,
                    type,
                    issues: chunk,
                    priority: Math.max(...chunk.map(issue => issue.priority)),
                    estimatedTime: this.estimateTime(chunk)
                });
            }
        });

        // Trier par priorit√© et limiter
        return batches
            .sort((a, b) => b.priority - a.priority)
            .slice(0, this.maxPrompts);
    }

    estimateTime(issues) {
        const timeByType = {
            'test-failure': 8,
            'eslint-error': 3,
            'typescript-error': 5
        };
        
        return issues.reduce((total, issue) => {
            return total + (timeByType[issue.type] || 5);
        }, 0);
    }

    generateBatchPrompts(batches) {
        const prompts = [];
        
        batches.forEach(batch => {
            const promptContent = this.createIntelligentPrompt(batch);
            const promptFile = path.join(this.workersDir, `${batch.id}-prompt.md`);
            
            fs.writeFileSync(promptFile, promptContent);
            
            prompts.push({
                id: batch.id,
                file: promptFile,
                batch,
                priority: batch.priority
            });
            
            console.log(`üìù Prompt g√©n√©r√©: ${batch.id} (${batch.issues.length} probl√®mes, ${batch.estimatedTime}min)`);
        });
        
        return prompts;
    }

    createIntelligentPrompt(batch) {
        const priorityEmoji = batch.priority >= 90 ? 'üî•üî•üî•' : batch.priority >= 80 ? 'üî•üî•' : 'üî•';
        const typeDescription = {
            'test-failure': 'R√©paration de Tests',
            'eslint-error': 'Correction ESLint',
            'typescript-error': 'Correction TypeScript'
        }[batch.type] || 'R√©paration G√©n√©rale';

        return `# CLAUDE CODE WORKER: ${batch.id.toUpperCase()}

## üéØ MISSION BATCH INTELLIGENTE
**Sp√©cialit√©**: ${typeDescription} - Module ${batch.module}
**Priorit√©**: ${priorityEmoji} ${batch.priority >= 90 ? 'CRITIQUE' : batch.priority >= 80 ? 'HAUTE' : 'MOYENNE'}
**Temps estim√©**: ${batch.estimatedTime} min
**Probl√®mes √† r√©soudre**: ${batch.issues.length}

## üìã LISTE DES PROBL√àMES √Ä R√âSOUDRE

${batch.issues.map((issue, index) => `
### ${index + 1}. ${issue.description}
- **Fichier**: \`${issue.file}\`
- **Type**: ${issue.type}
- **Module**: ${issue.module}
${issue.count ? `- **Nombre d'erreurs**: ${issue.count}` : ''}
`).join('')}

## üõ†Ô∏è WORKFLOW BATCH OPTIMIS√â

### √âtape 1: Diagnostic en Lot
\`\`\`bash
# Tests sp√©cifiques au module ${batch.module}
npm test -- --testPathPattern="${batch.module}" --verbose

# ESLint sp√©cifique au module
npx eslint src/modules/${batch.module}/ src/services/*${batch.module}* src/hooks/*${batch.module}* --format=compact

# TypeScript check cibl√©
npx tsc --noEmit --skipLibCheck
\`\`\`

### √âtape 2: R√©paration Syst√©matique
${this.generateRepairInstructions(batch)}

### √âtape 3: Validation Batch
\`\`\`bash
# Validation du module complet
npm test -- --testPathPattern="${batch.module}" --coverage
npx eslint src/modules/${batch.module}/ --quiet
echo "‚úÖ Module ${batch.module} valid√©"
\`\`\`

## üéØ CRIT√àRES DE SUCC√àS BATCH
- ‚úÖ **${batch.issues.length}/${batch.issues.length} probl√®mes r√©solus**
- ‚úÖ **Tous les tests du module ${batch.module} passent**
- ‚úÖ **0 erreur ESLint dans le module**
- ‚úÖ **0 erreur TypeScript dans le module**
- ‚úÖ **Temps d'ex√©cution < 30 secondes**
- ‚úÖ **Pas de r√©gression sur les autres modules**

## üö® R√àGLES BATCH CRITIQUES
- **FOCUS MODULE**: Rester dans le module ${batch.module}
- **R√âPARATION PROGRESSIVE**: R√©soudre un probl√®me √† la fois
- **VALIDATION IMM√âDIATE**: Tester apr√®s chaque r√©paration
- **PATTERNS COH√âRENTS**: Utiliser les m√™mes solutions pour les m√™mes types de probl√®mes
- **AUTO-DESTRUCTION**: D√©truire ce prompt apr√®s succ√®s complet

## üìä AUTO-DESTRUCTION ET REPORTING
√Ä la fin de la mission, ex√©cuter ces commandes:

\`\`\`bash
# Cr√©er le rapport de succ√®s
echo "üéØ WORKER: ${batch.id}" >> WORKERS_BATCH_COMPLETED.log
echo "üìä STATUT: ‚úÖ SUCC√àS COMPLET" >> WORKERS_BATCH_COMPLETED.log
echo "üîß PROBL√àMES R√âSOLUS: ${batch.issues.length}/${batch.issues.length}" >> WORKERS_BATCH_COMPLETED.log
echo "‚è±Ô∏è TEMPS R√âEL: XX minutes" >> WORKERS_BATCH_COMPLETED.log
echo "üé® MODULE: ${batch.module} (${batch.type})" >> WORKERS_BATCH_COMPLETED.log
echo "---" >> WORKERS_BATCH_COMPLETED.log

# AUTO-DESTRUCTION du prompt (succ√®s uniquement)
rm "${batch.id}-prompt.md"
echo "üóëÔ∏è Prompt ${batch.id} auto-d√©truit apr√®s succ√®s complet"

# Notifier le manager
node scripts/claude-workers-manager.js complete ${batch.id} true
\`\`\`

## üîÑ WORKFLOW ULTRA-OPTIMIS√â
1. **Diagnostic global** du module ${batch.module}
2. **R√©paration en lot** des ${batch.issues.length} probl√®mes
3. **Validation continue** apr√®s chaque r√©paration
4. **Rapport final** + auto-destruction

**ATTENTION**: Ne pas passer au probl√®me suivant tant que le pr√©c√©dent n'est pas 100% r√©solu et valid√©.

GO BATCH! üöÄ‚ö°

---
**G√©n√©r√© automatiquement**: ${new Date().toISOString()}
**Auto-destruction**: Apr√®s succ√®s complet uniquement
**Manager**: auto-prompt-generator v2.0
**Batch**: ${batch.issues.length} probl√®mes group√©s intelligemment`;
    }

    generateRepairInstructions(batch) {
        const instructions = {
            'test-failure': `
**Strat√©gie de r√©paration des tests**:
1. **Lire chaque fichier de test** avec l'outil Read
2. **Identifier les patterns d'erreurs** (imports, mocks, API obsol√®tes)
3. **Appliquer les corrections syst√©matiques**:
   - Imports: utiliser @/ aliases
   - Mocks: suivre les patterns de jest.setup.js
   - APIs: adapter aux nouvelles versions (React Query v5, etc.)
   - DOM: utiliser jsdom quand n√©cessaire
4. **Valider imm√©diatement** chaque test r√©par√©
5. **Passer au test suivant** seulement si le pr√©c√©dent passe`,

            'eslint-error': `
**Strat√©gie de correction ESLint**:
1. **Lister les erreurs** avec npx eslint --format=json
2. **Grouper par type** (imports inutilis√©s, syntaxe, etc.)
3. **Appliquer les fixes automatiques** avec --fix quand possible
4. **Corriger manuellement** les erreurs complexes:
   - Imports/exports manquants
   - Variables non utilis√©es
   - R√®gles TypeScript
5. **Valider** avec npx eslint --quiet`,

            'typescript-error': `
**Strat√©gie de correction TypeScript**:
1. **Analyser les erreurs** avec npx tsc --noEmit
2. **Identifier les patterns** (types manquants, imports incorrects)
3. **Corriger syst√©matiquement**:
   - Ajouter les types manquants
   - Corriger les imports de types
   - R√©soudre les conflits d'interfaces
   - Mettre √† jour les d√©clarations obsol√®tes
4. **Valider** avec npx tsc --noEmit`
        };

        return instructions[batch.type] || 'Instructions de r√©paration g√©n√©rale';
    }
}

// CLI Interface
if (require.main === module) {
    const generator = new AutoPromptGenerator();
    
    const command = process.argv[2];
    
    switch (command) {
        case 'generate':
            generator.generateIntelligentPrompts().then(() => {
                console.log('‚úÖ G√©n√©ration termin√©e');
            }).catch(error => {
                console.error('‚ùå Erreur lors de la g√©n√©ration:', error.message);
            });
            break;
            
        default:
            console.log(`
üß† AUTO PROMPT GENERATOR V2.0

Usage:
  node auto-prompt-generator.js generate    # G√©n√©rer des prompts intelligents

Fonctionnalit√©s:
  - Analyse en temps r√©el des probl√®mes
  - Groupage intelligent par module/type
  - Prompts batch optimis√©s (3 probl√®mes max par prompt)
  - Auto-destruction apr√®s succ√®s
  - Estimation de temps r√©aliste
            `);
    }
}

module.exports = AutoPromptGenerator;
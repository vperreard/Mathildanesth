#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Lire la ROADMAP
const roadmapPath = path.join(__dirname, '../docs/04_roadmap/ROADMAP.md');
const roadmapContent = fs.readFileSync(roadmapPath, 'utf8');

// Parser les t√¢ches en cours et √† faire
const tasks = [];

// Pattern pour trouver les t√¢ches avec [ ] (non compl√©t√©es)
const taskPattern = /- \[ \] \*\*(.+?)\*\*(?:\s*:\s*(.+?))?(?:\s*[‚úÖ‚ö†Ô∏èüî¥üêå])?$/gm;
let match;

while ((match = taskPattern.exec(roadmapContent)) !== null) {
  const title = match[1].trim();
  const description = match[2] ? match[2].trim() : '';
  
  // D√©terminer la priorit√© bas√©e sur les indicateurs
  let priority = 'medium';
  if (match[0].includes('üî¥') || match[0].includes('URGENT') || match[0].includes('CRITIQUE')) {
    priority = 'critical';
  } else if (match[0].includes('‚ö†Ô∏è') || match[0].includes('PRIORIT√â')) {
    priority = 'high';
  }
  
  tasks.push({ title, description, priority });
}

// Ajouter aussi les t√¢ches de la section "Prochaines Priorit√©s"
const prioritiesSection = roadmapContent.match(/\*\*üöß Prochaines Priorit√©s[\s\S]*?\*\*üöß En Cours/);
if (prioritiesSection) {
  const sectionTaskPattern = /- \*\*(.+?)\*\*(?:\s*:\s*(.+?))?/g;
  while ((match = sectionTaskPattern.exec(prioritiesSection[0])) !== null) {
    const title = match[1].trim();
    const description = match[2] ? match[2].trim() : '';
    
    // √âviter les doublons
    if (!tasks.find(t => t.title === title)) {
      tasks.push({ title, description, priority: 'high' });
    }
  }
}

// T√¢ches sp√©cifiques importantes de la ROADMAP
const specificTasks = [
  { title: "Restauration Page Planning Hebdomadaire", priority: "critical" },
  { title: "Corriger 285 tests d√©faillants", priority: "critical" },
  { title: "Migration routes fran√ßaises pour tests", priority: "high" },
  { title: "Am√©liorer couverture tests 12% ‚Üí 70%", priority: "high" },
  { title: "Impl√©menter API affectations trames", priority: "high" },
  { title: "Optimiser performance auth < 1s", priority: "medium" },
  { title: "Refactoring Architecture - doublons", priority: "medium" },
  { title: "Planning Unifi√© - consolidation", priority: "medium" },
  { title: "Templates - simplification syst√®me", priority: "medium" },
  { title: "Build production sans warnings", priority: "high" },
  { title: "0 @ts-ignore dans modules critiques", priority: "high" },
  { title: "Finaliser Sprint 2 - UX M√©decin", priority: "medium" },
];

// Ajouter les t√¢ches sp√©cifiques sans doublons
specificTasks.forEach(task => {
  if (!tasks.find(t => t.title === task.title)) {
    tasks.push(task);
  }
});

console.log(`\nüìã ${tasks.length} t√¢ches trouv√©es dans la ROADMAP\n`);

// Afficher les t√¢ches trouv√©es
tasks.forEach((task, index) => {
  console.log(`${index + 1}. [${task.priority}] ${task.title}`);
  if (task.description) {
    console.log(`   ‚Üí ${task.description}`);
  }
});

console.log('\nüöÄ Import des t√¢ches dans task-master...\n');

// Importer dans task-master
tasks.forEach((task, index) => {
  try {
    const cmd = `./scripts/tm add "${task.title}" ${task.priority}`;
    execSync(cmd, { stdio: 'inherit' });
    console.log(`‚úÖ T√¢che ${index + 1}/${tasks.length} import√©e`);
  } catch (error) {
    console.error(`‚ùå Erreur pour la t√¢che: ${task.title}`);
  }
});

console.log('\n‚ú® Import termin√© !');
console.log('Utilisez "./scripts/tm list" pour voir toutes les t√¢ches.');
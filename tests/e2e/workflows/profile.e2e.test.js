const puppeteer = require('puppeteer');
const config = require('../config/puppeteer.config');
const PuppeteerHelpers = require('../utils/puppeteer-helpers');

describe('Workflow Profil Utilisateur E2E', () => {
    let browser;
    let page;

    beforeAll(async () => {
        console.log('üöÄ D√©marrage du navigateur pour les tests profil...');
        browser = await puppeteer.launch(config.browser);
    });

    afterAll(async () => {
        if (browser) {
            await browser.close();
            console.log('üõë Navigateur ferm√©');
        }
    });

    beforeEach(async () => {
    jest.clearAllMocks();
        page = await browser.newPage();
        await page.setViewport(config.page.viewport);
        page.setDefaultTimeout(config.page.defaultTimeout);

        // Connexion avant chaque test
        await PuppeteerHelpers.login(page);
    });

    afterEach(async () => {
        if (page) {
            await page.close();
        }
    });

    describe('üë§ Affichage du Profil', () => {
        test('Acc√®s et chargement de la page profil', async () => {
            try {
                // Navigation vers le profil
                await page.goto(`${config.urls.base}/profil`, {
                    waitUntil: 'networkidle2'
                });

                // V√©rifier les √©l√©ments principaux
                await PuppeteerHelpers.verifyPageLoad(page, [
                    '[data-testid="profile-header"], .profile-header',
                    '[data-testid="user-info"], .user-information',
                    '[data-testid="profile-form"], form'
                ]);

                // V√©rifier l'affichage des informations utilisateur
                const userName = await page.$eval(
                    '[data-testid="user-name"], .user-name, h1',
                    el => el.textContent
                );
                expect(userName).toBeTruthy();

                const userEmail = await page.$eval(
                    '[data-testid="user-email"], .user-email, [type="email"]',
                    el => el.textContent || el.value
                );
                expect(userEmail).toContain('@');

                await PuppeteerHelpers.screenshot(page, 'profile-loaded');
                console.log('‚úÖ Page profil charg√©e avec succ√®s');
            } catch (error) {
                await PuppeteerHelpers.screenshot(page, 'profile-load-error');
                throw error;
            }
        });

        test('Affichage des compteurs de cong√©s', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                await page.waitForSelector('[data-testid="profile-header"], .profile-header');

                // Chercher la section des compteurs
                const countersSection = await page.$('[data-testid="leave-counters"], .leave-balances, .counters-section');
                
                if (countersSection) {
                    // V√©rifier les diff√©rents compteurs
                    const counters = await page.$$('[data-testid^="counter-"], .counter-item');
                    
                    for (const counter of counters) {
                        const label = await counter.$eval('.counter-label, span', el => el.textContent);
                        const value = await counter.$eval('.counter-value, .balance', el => el.textContent);
                        
                        console.log(`  ‚úì ${label}: ${value}`);
                    }
                    
                    console.log(`‚úÖ ${counters.length} compteurs de cong√©s affich√©s`);
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Compteurs de cong√©s non visibles');
            }
        });
    });

    describe('‚úèÔ∏è Modification du Profil', () => {
        test('Modification des informations personnelles', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                await page.waitForSelector('[data-testid="profile-form"], form');

                // Trouver et modifier le champ t√©l√©phone
                const phoneInput = await page.$('input[name="phone"], input[type="tel"]');
                
                if (phoneInput) {
                    // Effacer et remplir avec un nouveau num√©ro
                    await phoneInput.click({ clickCount: 3 });
                    await phoneInput.type('0612345678');
                    
                    // Soumettre le formulaire
                    const submitButton = await page.$('button[type="submit"], button:has-text("Enregistrer")');
                    await submitButton.click();
                    
                    // Attendre la confirmation
                    await page.waitForSelector(
                        '.success-message, [data-testid="update-success"]',
                        { timeout: 5000 }
                    );
                    
                    console.log('‚úÖ Informations personnelles mises √† jour');
                    await PuppeteerHelpers.screenshot(page, 'profile-updated');
                }
            } catch (error) {
                await PuppeteerHelpers.screenshot(page, 'profile-update-error');
                console.log('‚ö†Ô∏è Erreur lors de la mise √† jour du profil');
            }
        });

        test('Changement de mot de passe', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                
                // Chercher le bouton ou lien pour changer le mot de passe
                const changePasswordButton = await page.$('[data-testid="change-password"], button:has-text("mot de passe")');
                
                if (changePasswordButton) {
                    await changePasswordButton.click();
                    await page.waitForTimeout(1000);
                    
                    // Remplir le formulaire de changement de mot de passe
                    const currentPasswordInput = await page.$('input[name="currentPassword"], input[name="old_password"]');
                    const newPasswordInput = await page.$('input[name="newPassword"], input[name="password"]');
                    const confirmPasswordInput = await page.$('input[name="confirmPassword"], input[name="password_confirmation"]');
                    
                    if (currentPasswordInput && newPasswordInput && confirmPasswordInput) {
                        await currentPasswordInput.type('test123');
                        await newPasswordInput.type('newPassword123!');
                        await confirmPasswordInput.type('newPassword123!');
                        
                        // Soumettre
                        const submitButton = await page.$('button[type="submit"]:has-text("Changer")');
                        await submitButton.click();
                        
                        // Note: Ne pas r√©ellement changer le mot de passe en test
                        console.log('‚úÖ Formulaire de changement de mot de passe test√©');
                    }
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Changement de mot de passe non test√©');
            }
        });
    });

    describe('üîî Param√®tres de Notifications', () => {
        test('Acc√®s aux param√®tres de notifications', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                
                // Chercher le lien vers les notifications
                const notifLink = await page.$('a[href*="/notifications"], [data-testid="notifications-settings"]');
                
                if (notifLink) {
                    await notifLink.click();
                    await page.waitForNavigation();
                    
                    const url = page.url();
                    expect(url).toContain('/notifications');
                    
                    // V√©rifier la page des notifications
                    await PuppeteerHelpers.verifyPageLoad(page, [
                        '[data-testid="notifications-settings"], .notifications-preferences'
                    ]);
                    
                    console.log('‚úÖ Page des param√®tres de notifications accessible');
                } else {
                    // Essayer l'URL directe
                    await page.goto(`${config.urls.base}/profil/notifications`);
                    console.log('‚úÖ Navigation directe vers les notifications');
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Param√®tres de notifications non accessibles');
            }
        });

        test('Modification des pr√©f√©rences de notifications', async () => {
            try {
                await page.goto(`${config.urls.base}/profil/notifications`);
                await page.waitForSelector('[data-testid="notifications-form"], form');

                // Chercher les toggles de notifications
                const notificationToggles = await page.$$('input[type="checkbox"], .toggle-switch');
                
                if (notificationToggles.length > 0) {
                    // Basculer le premier toggle
                    await notificationToggles[0].click();
                    await page.waitForTimeout(500);
                    
                    // Sauvegarder
                    const saveButton = await page.$('button:has-text("Sauvegarder")');
                    if (saveButton) {
                        await saveButton.click();
                        
                        await page.waitForSelector(
                            '.success-message, [data-testid="save-success"]',
                            { timeout: 3000 }
                        );
                        
                        console.log('‚úÖ Pr√©f√©rences de notifications mises √† jour');
                    }
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Modification des notifications non test√©e');
            }
        });
    });

    describe('üìä Historique et Statistiques', () => {
        test('Affichage de l\'historique des cong√©s', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                
                // Chercher la section historique
                const historySection = await page.$('[data-testid="leave-history"], .history-section');
                
                if (historySection) {
                    // V√©rifier la pr√©sence d'entr√©es d'historique
                    const historyItems = await page.$$('[data-testid="history-item"], .history-entry');
                    
                    if (historyItems.length > 0) {
                        console.log(`‚úÖ ${historyItems.length} entr√©es d'historique trouv√©es`);
                        
                        // Cliquer sur une entr√©e pour voir les d√©tails
                        await historyItems[0].click();
                        await page.waitForTimeout(500);
                        
                        const details = await page.$('.history-details, [data-expanded="true"]');
                        if (details) {
                            console.log('‚úÖ D√©tails de l\'historique affich√©s');
                        }
                    }
                } else {
                    // Chercher un lien vers l'historique
                    const historyLink = await page.$('a:has-text("Historique")');
                    if (historyLink) {
                        await historyLink.click();
                        console.log('‚úÖ Navigation vers l\'historique');
                    }
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Historique non disponible');
            }
        });

        test('Statistiques personnelles', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                
                // Chercher les statistiques
                const statsSection = await page.$('[data-testid="user-stats"], .statistics-section');
                
                if (statsSection) {
                    const stats = await page.$$('[data-testid^="stat-"], .stat-item');
                    
                    for (const stat of stats) {
                        const label = await stat.$eval('.stat-label', el => el.textContent);
                        const value = await stat.$eval('.stat-value', el => el.textContent);
                        console.log(`  ‚úì ${label}: ${value}`);
                    }
                    
                    console.log(`‚úÖ ${stats.length} statistiques affich√©es`);
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Statistiques non visibles');
            }
        });
    });

    describe('üìÑ Documents et T√©l√©chargements', () => {
        test('T√©l√©chargement des documents personnels', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                
                // Chercher la section documents
                const documentsSection = await page.$('[data-testid="documents"], .documents-section');
                
                if (documentsSection) {
                    const downloadButtons = await page.$$('button:has-text("T√©l√©charger"), a[download]');
                    
                    if (downloadButtons.length > 0) {
                        // Pr√©parer l'interception du t√©l√©chargement
                        const downloadPromise = new Promise((resolve) => {
                            page.once('download', resolve);
                        });
                        
                        await downloadButtons[0].click();
                        
                        const download = await Promise.race([
                            downloadPromise,
                            new Promise(resolve => setTimeout(() => resolve(null), 3000))
                        ]);
                        
                        if (download) {
                            console.log('‚úÖ T√©l√©chargement de document fonctionnel');
                        }
                    }
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Pas de documents disponibles');
            }
        });

        test('Export des donn√©es personnelles', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                
                // Chercher le bouton d'export
                const exportButton = await page.$('[data-testid="export-data"], button:has-text("Exporter")');
                
                if (exportButton) {
                    await exportButton.click();
                    await page.waitForTimeout(1000);
                    
                    // V√©rifier si un modal de choix appara√Æt
                    const exportModal = await page.$('[data-testid="export-modal"], .export-options');
                    
                    if (exportModal) {
                        // S√©lectionner le format CSV
                        const csvOption = await page.$('button:has-text("CSV")');
                        if (csvOption) {
                            await csvOption.click();
                            console.log('‚úÖ Export des donn√©es initi√©');
                        }
                    }
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Fonction export non disponible');
            }
        });
    });

    describe('üé® Personnalisation', () => {
        test('Changement du th√®me d\'affichage', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                
                // Chercher les options de th√®me
                const themeSelector = await page.$('[data-testid="theme-selector"], select[name="theme"]');
                
                if (themeSelector) {
                    await themeSelector.select('dark');
                    await page.waitForTimeout(500);
                    
                    // V√©rifier l'application du th√®me
                    const isDarkTheme = await page.evaluate(() => {
                        return document.body.classList.contains('dark') || 
                               document.documentElement.classList.contains('dark');
                    });
                    
                    if (isDarkTheme) {
                        console.log('‚úÖ Th√®me sombre appliqu√©');
                        await PuppeteerHelpers.screenshot(page, 'dark-theme');
                    }
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Personnalisation du th√®me non disponible');
            }
        });

        test('Pr√©f√©rences d\'affichage', async () => {
            try {
                await page.goto(`${config.urls.base}/profil`);
                
                // Chercher les pr√©f√©rences d'affichage
                const displayPrefs = await page.$('[data-testid="display-preferences"], .display-settings');
                
                if (displayPrefs) {
                    // Modifier la langue si disponible
                    const langSelect = await page.$('select[name="language"]');
                    if (langSelect) {
                        await langSelect.select('en');
                        console.log('‚úÖ Langue modifi√©e');
                    }
                    
                    // Modifier le format de date
                    const dateFormatSelect = await page.$('select[name="dateFormat"]');
                    if (dateFormatSelect) {
                        await dateFormatSelect.select('DD/MM/YYYY');
                        console.log('‚úÖ Format de date modifi√©');
                    }
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è Pr√©f√©rences d\'affichage non configurables');
            }
        });
    });
});
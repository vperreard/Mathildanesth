const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

module.exports = async () => {
    console.log('üöÄ Initialisation de l\'environnement de test E2E...');

    // Cr√©er le dossier screenshots si inexistant
    const screenshotDir = path.join(__dirname, 'screenshots');
    if (!fs.existsSync(screenshotDir)) {
        fs.mkdirSync(screenshotDir, { recursive: true });
    }

    // S'assurer que l'utilisateur de test existe
    try {
        console.log('üë§ Cr√©ation de l\'utilisateur de test...');
        execSync('node create-test-user.js', { stdio: 'pipe' });
        console.log('‚úÖ Utilisateur de test cr√©√©/mis √† jour');
    } catch (error) {
        console.warn('‚ö†Ô∏è  Attention: Erreur lors de la cr√©ation de l\'utilisateur de test:', error.message);
    }

    // V√©rifier que l'application est accessible
    const baseUrl = process.env.TEST_BASE_URL || 'http://localhost:3000';
    console.log(`üåê V√©rification de l'accessibilit√© de l'application sur ${baseUrl}...`);

    try {
        const { default: fetch } = await import('node-fetch');
        const response = await fetch(baseUrl);
        if (response.ok) {
            console.log('‚úÖ Application accessible et pr√™te pour les tests');
        } else {
            console.warn('‚ö†Ô∏è  L\'application r√©pond mais avec un code d\'erreur:', response.status);
        }
    } catch (error) {
        console.error('‚ùå Impossible d\'acc√©der √† l\'application. Assurez-vous qu\'elle est d√©marr√©e:', error.message);
        throw new Error('L\'application doit √™tre d√©marr√©e avant de lancer les tests E2E');
    }

    // Configuration des variables d'environnement globales pour les tests
    process.env.PUPPETEER_HEADLESS = process.env.CI ? 'true' : 'false';
    process.env.PUPPETEER_SLOWMO = process.env.CI ? '0' : '100';

    console.log('‚úÖ Environnement de test E2E initialis√© avec succ√®s !');
}; 
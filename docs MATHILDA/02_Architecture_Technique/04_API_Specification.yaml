openapi: 3.0.0
info:
  title: MATHILDA API
  description: API REST pour l'application de planification de bloc opératoire MATHILDA.
  version: 1.0.0
servers:
  - url: /api/v1
    description: Serveur de développement local

# Définition des composants réutilisables (Schémas, Réponses, Paramètres, etc.)
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Code d'erreur interne (ex: VALIDATION_ERROR)
            message:
              type: string
              description: Message d'erreur lisible par l'humain
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
    # ... Ajouter d'autres schémas (Utilisateur, Affectation, Congé, etc.)

  securitySchemes:
    bearerAuth: # Peut être renommé en cookieAuth si utilisation de cookies
      type: http
      scheme: bearer
      bearerFormat: JWT # Ou description du cookie

# Définition de la sécurité globale (si applicable)
# security:
#   - bearerAuth: []

# Définition des chemins (endpoints)
paths:
  /auth/session:
    get:
      summary: Récupérer les informations de la session utilisateur
      tags:
        - Authentification
      responses:
        '200':
          description: Informations de session
          content:
            application/json:
              schema:
                # Définir le schéma de la session utilisateur
                type: object
        '401':
          description: Non authentifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me:
    get:
      summary: Récupérer les informations de l'utilisateur connecté
      tags:
        - Utilisateurs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Détails de l'utilisateur
          content:
            application/json:
              schema:
                # $ref: '#/components/schemas/User'
                type: object
        '401':
          description: Non authentifié
        '404':
          description: Utilisateur non trouvé

  # ... Ajouter les autres endpoints définis dans docs/02_Architecture_Technique/03_API_Design.md
  # Exemple:
  /planning-assignments:
    get:
      summary: Récupérer les affectations pour une période donnée
      tags:
        - Planning
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
        # ... autres paramètres (userId, roomId, etc.)
      responses:
        '200':
          description: Liste des affectations
          content:
            application/json:
              schema:
                type: array
                items:
                  # $ref: '#/components/schemas/PlanningAssignment'
                  type: object
        '400':
          description: Paramètres invalides
        '401':
          description: Non authentifié

# Définition des tags (groupes d'endpoints)
tags:
  - name: Authentification
    description: Opérations liées à l'authentification des utilisateurs
  - name: Utilisateurs
    description: Gestion des utilisateurs et de leurs profils
  - name: Planning
    description: Gestion des affectations du planning
  - name: Congés
    description: Gestion des demandes de congés
  - name: Configuration
    description: Gestion des paramètres de configuration de l'application
  - name: Notifications
    description: Gestion des notifications
  - name: Audit
    description: Accès à l'historique et aux logs d'audit
  - name: Échanges
    description: Gestion des propositions d'échanges d'affectations
  - name: Requêtes Spécifiques
    description: Gestion des requêtes utilisateurs particulières
  - name: Versions Planning
    description: Gestion des versions de planning (brouillon, publié, archivé)
  # ... Ajouter d'autres tags si nécessaire 
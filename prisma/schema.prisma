generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TrameModele {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  description        String?
  siteId             String?
  isActive           Boolean             @default(true)
  dateDebutEffet     DateTime
  dateFinEffet       DateTime?
  recurrenceType     RecurrenceTypeTrame @default(HEBDOMADAIRE)
  joursSemaineActifs Int[]
  typeSemaine        TypeSemaineTrame    @default(TOUTES)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  roles              TrameRoleType[]     @default([TOUS])
  detailsJson        Json?
  affectations       AffectationModele[]
  site               Site?               @relation("SiteTrameModeles", fields: [siteId], references: [id])

  @@map("trame_modeles")
}

model AffectationModele {
  id              Int                     @id @default(autoincrement())
  trameModeleId   Int
  activityTypeId  String
  jourSemaine     DayOfWeek
  periode         Period
  typeSemaine     TypeSemaineTrame
  operatingRoomId Int?
  locationId      Int?
  priorite        Int                     @default(5)
  isActive        Boolean                 @default(true)
  detailsJson     Json?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  activityType    ActivityType            @relation("ActivityTypeAffectationModeles", fields: [activityTypeId], references: [id])
  operatingRoom   OperatingRoom?          @relation("OperatingRoomAffectationModeles", fields: [operatingRoomId], references: [id])
  trameModele     TrameModele             @relation(fields: [trameModeleId], references: [id], onDelete: Cascade)
  personnelRequis PersonnelRequisModele[]

  @@map("affectation_modeles")
}

model PersonnelRequisModele {
  id                          Int                     @id @default(autoincrement())
  affectationModeleId         Int
  roleGenerique               String
  professionalRoleId          String?
  specialtyId                 Int?
  nombreRequis                Int                     @default(1)
  personnelHabituelUserId     Int?
  personnelHabituelSurgeonId  Int?
  personnelHabituelNomExterne String?
  notes                       String?
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  affectationModele           AffectationModele       @relation(fields: [affectationModeleId], references: [id], onDelete: Cascade)
  surgeonHabituel             Surgeon?                @relation("SurgeonHabituelPourPersonnelRequis", fields: [personnelHabituelSurgeonId], references: [id])
  userHabituel                User?                   @relation("UserHabituelPourPersonnelRequis", fields: [personnelHabituelUserId], references: [id])
  professionalRoleConfig      ProfessionalRoleConfig? @relation("RoleConfigPourPersonnelRequis", fields: [professionalRoleId], references: [code])
  specialty                   Specialty?              @relation("SpecialtyPourPersonnelRequis", fields: [specialtyId], references: [id])

  @@map("personnel_requis_modeles")
}

model BlocDayPlanning {
  id                String                 @id @default(uuid())
  date              DateTime
  siteId            String
  status            BlocPlanningStatus     @default(DRAFT)
  lockedAt          DateTime?
  lockedByUserId    Int?
  validatedAt       DateTime?
  validatedByUserId Int?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  site              Site                   @relation(fields: [siteId], references: [id])
  conflicts         BlocPlanningConflict[]
  assignments       BlocRoomAssignment[]

  @@unique([siteId, date])
  @@map("bloc_day_plannings")
}

model BlocRoomAssignment {
  id                           String                @id @default(uuid())
  blocDayPlanningId            String
  operatingRoomId              Int
  period                       Period
  chirurgienId                 Int?
  expectedSpecialty            String?
  sourceBlocTrameAffectationId Int?
  notes                        String?
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  blocDayPlanning              BlocDayPlanning       @relation(fields: [blocDayPlanningId], references: [id], onDelete: Cascade)
  surgeon                      Surgeon?              @relation(fields: [chirurgienId], references: [id])
  operatingRoom                OperatingRoom         @relation(fields: [operatingRoomId], references: [id])
  staffAssignments             BlocStaffAssignment[]

  @@map("bloc_room_assignments")
}

model BlocStaffAssignment {
  id                   String             @id @default(uuid())
  blocRoomAssignmentId String
  userId               Int
  role                 BlocStaffRole
  isPrimaryAnesthetist Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  blocRoomAssignment   BlocRoomAssignment @relation(fields: [blocRoomAssignmentId], references: [id], onDelete: Cascade)
  user                 User               @relation(fields: [userId], references: [id])

  @@map("bloc_staff_assignments")
}

model BlocPlanningConflict {
  id                       String           @id @default(uuid())
  blocDayPlanningId        String
  relatedRoomAssignmentId  String?
  relatedStaffAssignmentId String?
  relatedUserId            Int?
  relatedSurgeonId         Int?
  type                     String
  message                  String
  severity                 ConflictSeverity
  isResolved               Boolean          @default(false)
  resolvedAt               DateTime?
  resolvedByUserId         Int?
  resolutionNotes          String?
  isForceResolved          Boolean          @default(false)
  forceResolvedAt          DateTime?
  forceResolvedByUserId    Int?
  forceResolutionNotes     String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  blocDayPlanning          BlocDayPlanning  @relation(fields: [blocDayPlanningId], references: [id], onDelete: Cascade)
  forceResolvedByUser      User?            @relation("ForcedBy", fields: [forceResolvedByUserId], references: [id])
  resolvedByUser           User?            @relation("ResolvedBy", fields: [resolvedByUserId], references: [id])

  @@map("bloc_planning_conflicts")
}

model User {
  id                                  Int                        @id @default(autoincrement())
  nom                                 String
  prenom                              String
  login                               String                     @unique
  email                               String                     @unique
  password                            String
  role                                Role                       @default(USER)
  professionalRole                    ProfessionalRole
  tempsPartiel                        Boolean                    @default(false)
  pourcentageTempsPartiel             Float?
  dateEntree                          DateTime?
  dateSortie                          DateTime?
  actif                               Boolean                    @default(true)
  createdAt                           DateTime                   @default(now())
  updatedAt                           DateTime                   @updatedAt
  mustChangePassword                  Boolean                    @default(false)
  phoneNumber                         String?
  alias                               String?
  workOnMonthType                     WeekType?
  workPattern                         WorkPatternType            @default(FULL_TIME)
  joursTravaillesSemaineImpaire       Json                       @default("[]")
  joursTravaillesSemainePaire         Json                       @default("[]")
  displayPreferences                  Json?
  lastLogin                           DateTime?
  departmentId                        String?
  canSuperviseEndo                    Boolean                    @default(false)
  canSuperviseOphtalmo                Boolean                    @default(false)
  Absence                             Absence[]
  initiatedSwapRequests               AssignmentSwapRequest[]    @relation("InitiatedSwapRequests")
  receivedSwapRequests                AssignmentSwapRequest[]    @relation("ReceivedSwapRequests")
  dashboards                          Dashboard[]
  duties                              Duty[]
  loginLogs                           LoginLog[]
  onCalls                             OnCall[]
  createdRules                        Rule[]                     @relation("CreatedRules")
  updatedRules                        Rule[]                     @relation("UpdatedRules")
  createdSimulationScenarios          SimulationScenario[]       @relation("UserSimulationScenarios")
  tramesCreated                       TrameAffectation[]         @relation("CreatedTrames")
  assignments                         Assignment[]
  auditLogs                           AuditLog[]
  blocPlanningConflictsForced         BlocPlanningConflict[]     @relation("ForcedBy")
  blocPlanningConflictsResolved       BlocPlanningConflict[]     @relation("ResolvedBy")
  blocStaffAssignments                BlocStaffAssignment[]
  authoredMessages                    ContextualMessage[]        @relation("AuthoredMessages")
  leaveBalances                       LeaveBalance[]             @relation("UserLeaveBalances")
  approvedLeaves                      Leave[]                    @relation("ApprovedLeaves")
  leaves                              Leave[]
  notificationPreferences             NotificationPreference?    @relation("UserNotificationPreferences")
  triggeredNotifications              Notification[]             @relation("TriggeredByUserNotifications")
  notifications                       Notification[]             @relation("UserNotifications")
  CreatedIncompatibilities            PersonnelIncompatibility[] @relation("CreatedIncompatibilities")
  incompatibilitiesAsUser1            PersonnelIncompatibility[] @relation("User1Incompatibilities")
  incompatibilitiesAsUser2            PersonnelIncompatibility[] @relation("User2Incompatibilities")
  personnelRequisModelesCommeHabituel PersonnelRequisModele[]    @relation("UserHabituelPourPersonnelRequis")
  plannedAbsences                     PlannedAbsence[]
  validatedAbsences                   PlannedAbsence[]           @relation("ValidatedAbsences")
  approvedCarryOvers                  QuotaCarryOver[]           @relation("ApprovedCarryOvers")
  quotaCarryOvers                     QuotaCarryOver[]           @relation("UserQuotaCarryOvers")
  approvedTransfers                   QuotaTransfer[]            @relation("ApprovedTransfers")
  quotaTransfers                      QuotaTransfer[]            @relation("UserQuotaTransfers")
  regularAssignments                  RegularAssignment[]
  createdSimulationTemplates          SimulationTemplate[]       @relation("UserSimulationTemplates")
  surgeonProfile                      Surgeon?
  calendarSettings                    UserCalendarSettings?
  assignedRequests                    UserRequest[]              @relation("AssignedRequests")
  userRequests                        UserRequest[]
  assignedSkills                      UserSkill[]                @relation("AssignedSkillsByAdmin")
  userSkills                          UserSkill[]
  department                          Department?                @relation(fields: [departmentId], references: [id])
  sites                               Site[]                     @relation("SiteUsers")
  teamMembership                      TeamConfiguration[]        @relation("TeamMembers")
  teamResponsibilities                TeamConfiguration[]        @relation("TeamResponsibles")
  systemConfigUpdates                 SystemConfig[]             @relation("SystemConfigUpdates")
  activityLogs                        ActivityLog[]              @relation("UserActivityLogs")
  createdRulesTemplates               RulesTemplate[]            @relation("CreatedRulesTemplates")
  unifiedRequestsAsRequester          UnifiedRequest[]           @relation("UnifiedRequestRequester")
  unifiedRequestsAsAssignee           UnifiedRequest[]           @relation("UnifiedRequestAssignedTo")
  unifiedRequestNotifications         UnifiedRequestNotification[] @relation

  @@map("users")
}

model Specialty {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @unique
  isPediatric            Boolean                 @default(false)
  assignments            Assignment[]
  personnelRequisModeles PersonnelRequisModele[] @relation("SpecialtyPourPersonnelRequis")
  surgeons               Surgeon[]               @relation("SpecialtyToSurgeon")
}

model Surgeon {
  id                                  Int                        @id @default(autoincrement())
  nom                                 String
  prenom                              String
  email                               String?                    @unique
  phoneNumber                         String?
  status                              UserStatus                 @default(ACTIF)
  userId                              Int?                       @unique
  googleSheetName                     String?
  absences                            Absence[]
  assignments                         Assignment[]               @relation("SurgeonAssignments")
  blocRoomAssignments                 BlocRoomAssignment[]
  incompatibilitiesAsSurgeon1         PersonnelIncompatibility[] @relation("Surgeon1Incompatibilities")
  incompatibilitiesAsSurgeon2         PersonnelIncompatibility[] @relation("Surgeon2Incompatibilities")
  personnelRequisModelesCommeHabituel PersonnelRequisModele[]    @relation("SurgeonHabituelPourPersonnelRequis")
  plannedAbsences                     PlannedAbsence[]
  preferences                         SurgeonPreference[]
  regularAssignments                  RegularAssignment[]
  user                                User?                      @relation(fields: [userId], references: [id])
  specialties                         Specialty[]                @relation("SpecialtyToSurgeon")
  sites                               Site[]                     @relation("SurgeonSites")

  @@unique([nom, prenom], name: "unique_nom_prenom")
  @@map("surgeons")
}

model SurgeonPreference {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  surgeonId Int
  surgeon   Surgeon @relation(fields: [surgeonId], references: [id])

  @@map("preferences")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlanningRule {
  id              String           @id @default(cuid())
  category        String
  name            String
  description     String?
  type            String?          // PLANNING, LEAVE, CONSTRAINT, ALLOCATION, SUPERVISION
  status          String           @default("draft") // draft, active, archived, pending_approval
  enabled         Boolean          @default(true)
  isActive        Boolean          @default(true) // Legacy field, kept for compatibility
  priority        Int              @default(1)
  version         Int              @default(1)
  createdBy       String
  updatedBy       String
  effectiveDate   DateTime?
  expirationDate  DateTime?
  conditionJSON   Json             // Legacy field
  parameterJSON   Json             // Legacy field
  conditions      Json?
  actions         Json?
  conditionGroups Json?
  tags            String[]         @default([])
  contexts        String[]         @default([])
  metadata        Json?
  conflictsWith   String[]         @default([])
  dependencies    String[]         @default([])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  versions        RuleVersion[]
  metrics         RuleMetrics?

  @@index([type])
  @@index([status])
  @@index([enabled])
  @@index([priority])
  @@index([effectiveDate])
  @@index([tags])
  @@index([contexts])
}

model RuleVersion {
  id        String       @id @default(cuid())
  ruleId    String
  rule      PlanningRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  version   Int
  changes   Json?
  createdBy String
  createdAt DateTime     @default(now())
  message   String?
  snapshot  Json

  @@unique([ruleId, version])
  @@index([ruleId])
  @@index([createdAt])
  @@map("rule_versions")
}

model RuleMetrics {
  id                  String       @id @default(cuid())
  ruleId              String       @unique
  rule                PlanningRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  evaluationCount     Int          @default(0)
  averageExecutionTime Float       @default(0)
  successRate         Float        @default(0)
  lastEvaluatedAt     DateTime?
  impactedUsersCount  Int          @default(0)
  violationCount      Int          @default(0)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@index([ruleId])
  @@index([lastEvaluatedAt])
  @@map("rule_metrics")
}

model OperatingRoom {
  id                  Int                  @id @default(autoincrement())
  name                String
  number              String               @unique
  description         String?
  roomType            RoomType             @default(STANDARD)
  capacity            Int                  @default(1)
  isActive            Boolean              @default(true)
  displayOrder        Int                  @default(0)
  colorCode           String?
  supervisionRules    Json?
  allowedSpecialties  String[]             @default([])
  siteId              String
  operatingSectorId   Int?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  affectationModeles  AffectationModele[]  @relation("OperatingRoomAffectationModeles")
  assignments         Assignment[]
  blocRoomAssignments BlocRoomAssignment[]
  operatingSector     OperatingSector?     @relation(fields: [operatingSectorId], references: [id])
  site                Site                 @relation("SiteOperatingRooms", fields: [siteId], references: [id])

  @@index([siteId])
  @@index([operatingSectorId])
  @@map("operating_rooms")
}

model Rule {
  id            String         @id @default(uuid())
  name          String
  description   String?
  type          RuleType
  priority      RulePriority   @default(WARNING)
  isActive      Boolean        @default(false)
  validFrom     DateTime
  validTo       DateTime?
  configuration Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     Int
  updatedBy     Int?
  createdByUser User           @relation("CreatedRules", fields: [createdBy], references: [id])
  updatedByUser User?          @relation("UpdatedRules", fields: [updatedBy], references: [id])
  conflicts     RuleConflict[] @relation("RuleToConflict")
}

model RuleConflict {
  id                String       @id @default(uuid())
  description       String
  severity          RuleSeverity @default(WARNING)
  detectedAt        DateTime     @default(now())
  resolvedAt        DateTime?
  resolution        String?
  resolutionDetails String?
  rules             Rule[]       @relation("RuleToConflict")
}

model Location {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  sector             String?
  isActive           Boolean             @default(true)
  duties             Duty[]
  onCalls            OnCall[]
  assignments        Assignment[]
  regularAssignments RegularAssignment[]
}

model LeaveTypeSetting {
  id               String   @id @default(cuid())
  code             String   @unique
  label            String
  description      String?
  rules            Json?
  isActive         Boolean  @default(true)
  isUserSelectable Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("leave_type_settings")
}

model Leave {
  id                 String              @id @default(cuid())
  userId             Int
  startDate          DateTime
  endDate            DateTime
  typeCode           String
  type               LeaveType
  status             LeaveStatus
  reason             String?
  comment            String?
  requestDate        DateTime            @default(now())
  approvalDate       DateTime?
  approvedById       Int?
  countedDays        Float
  calculationDetails Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isRecurring        Boolean?            @default(false)
  parentId           String?
  recurrencePattern  Json?
  halfDayPeriod      String?
  isHalfDay          Boolean?
  alerts             LeaveRequestAlert[]
  approvedBy         User?               @relation("ApprovedLeaves", fields: [approvedById], references: [id])
  parent             Leave?              @relation("RecurringLeaveOccurrences", fields: [parentId], references: [id])
  occurrences        Leave[]             @relation("RecurringLeaveOccurrences")
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate, endDate])
  @@index([typeCode])
  @@index([parentId])
  @@map("leaves")
}

model Duty {
  id         Int       @id @default(autoincrement())
  userId     Int
  date       DateTime
  locationId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  location   Location? @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([locationId])
}

model OnCall {
  id         Int       @id @default(autoincrement())
  userId     Int
  startDate  DateTime
  endDate    DateTime
  locationId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  location   Location? @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate])
  @@index([endDate])
  @@index([locationId])
}

model Assignment {
  id                    String                  @id @default(uuid())
  date                  DateTime
  userId                Int?
  chirurgien            String?
  salle                 String?
  activityTypeId        String?
  type                  String?
  statut                String?
  heureDebut            String?
  heureFin              String?
  notes                 String?
  specialtyId           Int?
  siteId                String?
  operatingRoomId       Int?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  blocDayPlanningId     String?
  surgeonId             Int?
  regularAssignmentId   Int?
  locationId            Int?
  period                Period?
  proposedSwapRequests  AssignmentSwapRequest[] @relation("ProposedSwapAssignment")
  requestedSwapRequests AssignmentSwapRequest[] @relation("RequestedSwapAssignment")
  activityType          ActivityType?           @relation("AssignmentActivityType", fields: [activityTypeId], references: [id])
  Location              Location?               @relation(fields: [locationId], references: [id])
  operatingRoom         OperatingRoom?          @relation(fields: [operatingRoomId], references: [id])
  regularAssignment     RegularAssignment?      @relation("GeneratedFromRegular", fields: [regularAssignmentId], references: [id])
  site                  Site?                   @relation(fields: [siteId], references: [id])
  specialty             Specialty?              @relation(fields: [specialtyId], references: [id])
  surgeon               Surgeon?                @relation("SurgeonAssignments", fields: [surgeonId], references: [id], onDelete: Cascade)
  user                  User?                   @relation(fields: [userId], references: [id])
  contextualMessages    ContextualMessage[]     @relation("AssignmentContextualMessages")
  notifications         Notification[]          @relation("NotificationRelatedAssignment")

  @@index([date])
  @@index([userId, date])
  @@index([siteId, date])
  @@map("assignments")
}

model OperatingSector {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  colorCode    String?
  isActive     Boolean         @default(true)
  description  String?
  rules        Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  displayOrder Int?
  siteId       String?
  category     SectorCategory  @default(STANDARD)
  site         Site?           @relation(fields: [siteId], references: [id])
  rooms        OperatingRoom[]

  @@index([siteId])
}

model UserCalendarSettings {
  id                 String   @id @default(cuid())
  userId             Int      @unique
  defaultView        String   @default("month")
  showWeekends       Boolean  @default(true)
  showHolidays       Boolean  @default(true)
  showRejectedLeaves Boolean  @default(false)
  colorScheme        String   @default("default")
  startWeekOn        String   @default("monday")
  timeFormat         String   @default("24h")
  notifications      Json     @default("{\"email\": true, \"sound\": false, \"browser\": true}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@map("user_calendar_settings")
}

model ProfessionalRoleConfig {
  id                     String                  @id
  code                   String                  @unique
  label                  String
  description            String?
  isActive               Boolean                 @default(true)
  displayPreferences     Json?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  personnelRequisModeles PersonnelRequisModele[] @relation("RoleConfigPourPersonnelRequis")
}

model TeamConfiguration {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  isDefault     Boolean  @default(false)
  isActive      Boolean  @default(true)
  gardes        Json
  consultations Json
  bloc          Json
  conges        Json
  fatigue       Json?
  tempsPartiel  Json?
  iades         Json?
  remplacants   Json?
  preferences   Json?
  statistiques  Json?
  horaires      Json?
  affectations  Json?
  transitions   Json?
  equite        Json?
  alertes       Json?
  algorithme    Json?
  rapports      Json?
  audit         Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  configuration Json?
  leaveQuotas   Json?
  rules         Json
  siteId        String?
  skillsNeeded  Json?
  workingHours  Json?
  site          Site?    @relation("SiteTeamConfigurations", fields: [siteId], references: [id])
  members       User[]   @relation("TeamMembers")
  responsibles  User[]   @relation("TeamResponsibles")

  @@map("team_configurations")
}

model RegularAssignment {
  id            Int               @id @default(autoincrement())
  trameId       String?
  userId        Int?
  surgeonId     Int?
  locationId    Int?
  weekType      WeekType          @default(ALL)
  active        Boolean           @default(true)
  configuration Json?
  type          String
  dayOfWeek     Int               @default(1)
  period        String
  siteId        String?
  assignments   Assignment[]      @relation("GeneratedFromRegular")
  location      Location?         @relation(fields: [locationId], references: [id])
  site          Site?             @relation(fields: [siteId], references: [id])
  surgeon       Surgeon?          @relation(fields: [surgeonId], references: [id])
  trame         TrameAffectation? @relation("TrameAssignments", fields: [trameId], references: [id])
  user          User?             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([surgeonId])
  @@index([trameId])
  @@index([siteId])
  @@index([dayOfWeek, period, weekType])
  @@map("regular_assignments")
}

model TrameAffectation {
  id          String              @id @default(cuid())
  name        String
  description String?
  isActive    Boolean             @default(true)
  startDate   DateTime
  endDate     DateTime?
  createdBy   Int?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User?               @relation("CreatedTrames", fields: [createdBy], references: [id])
  periods     TramePeriod[]
  assignments RegularAssignment[] @relation("TrameAssignments")
}

model TramePeriod {
  id          String            @id @default(uuid())
  name        String
  startTime   String
  endTime     String
  color       String
  isActive    Boolean           @default(true)
  isLocked    Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  trameId     String
  assignments TrameAssignment[]
  trame       TrameAffectation  @relation(fields: [trameId], references: [id], onDelete: Cascade)
}

model TrameAssignment {
  id       String      @id @default(uuid())
  type     String
  name     String
  duration Int
  isActive Boolean     @default(true)
  periodId String
  period   TramePeriod @relation(fields: [periodId], references: [id], onDelete: Cascade)
  posts    TramePost[]
}

model TramePost {
  id           String          @id @default(uuid())
  type         String
  name         String
  required     Boolean         @default(false)
  maxCount     Int             @default(1)
  minCount     Int             @default(0)
  assignmentId String
  assignment   TrameAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model PlannedAbsence {
  id             Int           @id @default(autoincrement())
  userId         Int?
  surgeonId      Int?
  startDate      DateTime
  endDate        DateTime
  type           AbsenceType
  typeDetail     String?
  impactPlanning Boolean       @default(true)
  priority       Int           @default(5)
  comment        String?
  status         AbsenceStatus
  validatedById  Int?
  notify         Boolean       @default(false)
  importSource   String?
  documents      Json?         @default("[]")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  surgeon        Surgeon?      @relation(fields: [surgeonId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])
  validatedBy    User?         @relation("ValidatedAbsences", fields: [validatedById], references: [id])

  @@index([userId])
  @@index([surgeonId])
  @@index([startDate, endDate])
  @@index([type, status])
  @@map("planned_absences")
}

model Notification {
  id                  String           @id @default(cuid())
  userId              Int
  type                NotificationType
  message             String
  link                String?
  isRead              Boolean          @default(false)
  createdAt           DateTime         @default(now())
  triggeredByUserId   Int?
  relatedAssignmentId String?
  relatedRequestId    String?
  relatedAssignment   Assignment?      @relation("NotificationRelatedAssignment", fields: [relatedAssignmentId], references: [id])
  relatedRequest      UserRequest?     @relation("NotificationRelatedRequest", fields: [relatedRequestId], references: [id])
  triggeredByUser     User?            @relation("TriggeredByUserNotifications", fields: [triggeredByUserId], references: [id])
  user                User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
}

model Dashboard {
  id        String   @id @default(cuid())
  userId    Int
  name      String
  widgets   Json
  layout    String   @default("grid")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Absence {
  id           String      @id @default(cuid())
  userId       Int?
  startDate    DateTime
  endDate      DateTime
  reason       String?
  approvalDate DateTime?
  approvedById Int?
  chirurgienId Int?
  comment      String?
  requestDate  DateTime    @default(now())
  type         LeaveType
  status       LeaveStatus
  surgeon      Surgeon?    @relation(fields: [chirurgienId], references: [id])
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([endDate])
  @@index([startDate])
  @@index([userId])
}

model LeaveBalance {
  id          String    @id @default(cuid())
  userId      Int
  leaveType   LeaveType
  year        Int
  initial     Float     @default(0)
  used        Float     @default(0)
  pending     Float     @default(0)
  remaining   Float     @default(0)
  lastUpdated DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserLeaveBalances", fields: [userId], references: [id])

  @@unique([userId, leaveType, year])
  @@map("leave_balances")
}

model QuotaTransferRule {
  id                    String    @id @default(cuid())
  fromType              LeaveType
  toType                LeaveType
  conversionRate        Float     @default(1.0)
  maxTransferDays       Float?
  maxTransferPercentage Float?
  requiresApproval      Boolean   @default(false)
  authorizedRoles       String[]  @default([])
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([fromType, toType])
  @@map("quota_transfer_rules")
}

model QuotaTransfer {
  id               String    @id @default(cuid())
  userId           Int
  fromType         LeaveType
  toType           LeaveType
  amount           Float
  convertedAmount  Float
  reason           String
  transferDate     DateTime  @default(now())
  status           String    @default("APPROVED")
  requiresApproval Boolean   @default(false)
  approvedById     Int?
  approvalDate     DateTime?
  comments         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  approvedBy       User?     @relation("ApprovedTransfers", fields: [approvedById], references: [id])
  user             User      @relation("UserQuotaTransfers", fields: [userId], references: [id])

  @@index([userId, fromType, toType])
  @@index([status])
  @@map("quota_transfers")
}

model QuotaCarryOverRule {
  id               String    @id @default(cuid())
  leaveType        LeaveType @unique
  ruleType         String    @default("PERCENTAGE")
  value            Float     @default(100.0)
  maxCarryOverDays Float?
  expirationDays   Int?
  requiresApproval Boolean   @default(false)
  authorizedRoles  String[]  @default([])
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("quota_carry_over_rules")
}

model QuotaCarryOver {
  id               String    @id @default(cuid())
  userId           Int
  leaveType        LeaveType
  fromYear         Int
  toYear           Int
  amount           Float
  expiryDate       DateTime?
  status           String    @default("APPROVED")
  requiresApproval Boolean   @default(false)
  approvedById     Int?
  approvalDate     DateTime?
  reason           String?
  comments         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  approvedBy       User?     @relation("ApprovedCarryOvers", fields: [approvedById], references: [id])
  user             User      @relation("UserQuotaCarryOvers", fields: [userId], references: [id])

  @@index([userId, leaveType])
  @@index([fromYear, toYear])
  @@index([status])
  @@map("quota_carry_overs")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityId   String
  entityType String
  userId     Int?
  details    String?
  timestamp  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}

model PublicHoliday {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  name        String
  description String?
  isNational  Boolean  @default(true)
  region      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, region])
  @@index([date])
  @@map("public_holidays")
}

model Department {
  id           String   @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  contactEmail String?
  contactPhone String?
  isActive     Boolean  @default(true)
  location     String?
  users        User[]

  @@map("departments")
}

model Site {
  id                 String              @id @default(uuid())
  name               String              @unique
  isActive           Boolean             @default(true)
  displayOrder       Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  address            String?
  colorCode          String?
  description        String?
  timezone           String              @default("Europe/Paris")
  operatingSectors   OperatingSector[]
  activityTypes      ActivityType[]      @relation("SiteActivityTypes")
  assignments        Assignment[]
  blocDayPlannings   BlocDayPlanning[]
  operatingRooms     OperatingRoom[]     @relation("SiteOperatingRooms")
  regularAssignments RegularAssignment[]
  teamConfigurations TeamConfiguration[] @relation("SiteTeamConfigurations")
  trameModeles       TrameModele[]       @relation("SiteTrameModeles")
  UserRequest        UserRequest[]       @relation("SiteUserRequests")
  users              User[]              @relation("SiteUsers")
  surgeons           Surgeon[]           @relation("SurgeonSites")
  unifiedRequests    UnifiedRequest[]

  @@map("sites")
}

model PersonnelIncompatibility {
  id            String              @id @default(cuid())
  user1Id       Int?
  surgeon1Id    Int?
  user2Id       Int?
  surgeon2Id    Int?
  type          IncompatibilityType
  reason        String?
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdBy     Int?
  createdByUser User?               @relation("CreatedIncompatibilities", fields: [createdBy], references: [id])
  surgeon1      Surgeon?            @relation("Surgeon1Incompatibilities", fields: [surgeon1Id], references: [id], onDelete: Cascade)
  surgeon2      Surgeon?            @relation("Surgeon2Incompatibilities", fields: [surgeon2Id], references: [id], onDelete: Cascade)
  user1         User?               @relation("User1Incompatibilities", fields: [user1Id], references: [id], onDelete: Cascade)
  user2         User?               @relation("User2Incompatibilities", fields: [user2Id], references: [id], onDelete: Cascade)

  @@index([user1Id, user2Id, type, startDate, endDate])
  @@index([surgeon1Id, surgeon2Id, type, startDate, endDate])
  @@index([user1Id, surgeon2Id, type, startDate, endDate])
  @@map("personnel_incompatibilities")
}

model RequestType {
  id                    String        @id @default(uuid())
  name                  String        @unique
  description           String?
  requiresAdminApproval Boolean       @default(true)
  isActive              Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  userRequests          UserRequest[]

  @@map("request_types")
}

model UserRequest {
  id                 String              @id @default(uuid())
  title              String
  description        String
  status             UserRequestStatus   @default(SUBMITTED)
  adminNotes         String?
  userId             Int
  requestTypeId      String
  assignedToId       Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  resolvedAt         DateTime?
  details            Json?
  endDate            DateTime?
  siteId             String?
  startDate          DateTime?
  contextualMessages ContextualMessage[] @relation("UserRequestContextualMessages")
  notifications      Notification[]      @relation("NotificationRelatedRequest")
  assignedTo         User?               @relation("AssignedRequests", fields: [assignedToId], references: [id])
  requestType        RequestType         @relation(fields: [requestTypeId], references: [id])
  site               Site?               @relation("SiteUserRequests", fields: [siteId], references: [id])
  user               User                @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([requestTypeId, status])
  @@index([assignedToId, status])
  @@map("user_requests")
}

model AssignmentSwapRequest {
  id                    String               @id @default(cuid())
  initiatorUserId       Int
  proposedAssignmentId  String
  targetUserId          Int?
  requestedAssignmentId String?
  status                AssignmentSwapStatus @default(PENDING)
  message               String?
  responseMessage       String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  expiresAt             DateTime?
  initiator             User                 @relation("InitiatedSwapRequests", fields: [initiatorUserId], references: [id])
  proposedAssignment    Assignment           @relation("ProposedSwapAssignment", fields: [proposedAssignmentId], references: [id])
  requestedAssignment   Assignment?          @relation("RequestedSwapAssignment", fields: [requestedAssignmentId], references: [id])
  targetUser            User?                @relation("ReceivedSwapRequests", fields: [targetUserId], references: [id])

  @@index([initiatorUserId])
  @@index([targetUserId])
  @@index([proposedAssignmentId])
  @@index([requestedAssignmentId])
}

model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  category    String?     @default("general")
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userSkills  UserSkill[]

  @@index([name])
  @@index([isActive, name])
  @@index([category])
  @@index([category, isActive])
  @@map("skills")
}

model UserSkill {
  id              String   @id @default(cuid())
  userId          Int
  skillId         String
  assignedAt      DateTime @default(now())
  assignedBy      Int?
  assignedByAdmin User?    @relation("AssignedSkillsByAdmin", fields: [assignedBy], references: [id])
  skill           Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId], name: "user_skill_unique_constraint")
  @@map("user_skills")
}

model ActivityType {
  id                   String              @id @default(uuid())
  name                 String              @unique
  description          String?
  category             ActivityCategory    @default(AUTRE)
  color                String?
  icon                 String?
  isActive             Boolean             @default(true)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  code                 String              @unique
  defaultDurationHours Float?
  defaultPeriod        Period?
  siteId               String?             @map("site_id")
  site                 Site?               @relation("SiteActivityTypes", fields: [siteId], references: [id])
  affectationModeles   AffectationModele[] @relation("ActivityTypeAffectationModeles")
  assignments          Assignment[]        @relation("AssignmentActivityType")

  @@map("activity_types")
}

model SchoolHolidayPeriod {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("school_holiday_periods")
}

model LeaveRequestAlert {
  id             Int      @id @default(autoincrement())
  leaveId        String
  ruleCode       String
  messageDetails String
  generatedAt    DateTime @default(now())
  leave          Leave    @relation(fields: [leaveId], references: [id], onDelete: Cascade)

  @@index([leaveId])
  @@map("leave_request_alerts")
}

model SimulationTemplate {
  id             String   @id @default(uuid())
  name           String
  description    String?
  isPublic       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdById    Int
  parametersJson Json
  category       String?
  createdBy      User     @relation("UserSimulationTemplates", fields: [createdById], references: [id])

  @@map("simulation_templates")
}

model SimulationScenario {
  id                    String                         @id @default(uuid())
  name                  String
  description           String?
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt
  createdById           Int?
  parameters            Json?
  status                String?                        @default("created")
  lastProgress          Int?                           @default(0)
  lastProgressUpdatedAt DateTime?
  lastMessage           String?
  createdBy             User?                          @relation("UserSimulationScenarios", fields: [createdById], references: [id])
  intermediateResults   SimulationIntermediateResult[]
  results               SimulationResult[]
}

model SimulationResult {
  id                 String             @id @default(uuid())
  scenarioId         String
  createdAt          DateTime           @default(now())
  statisticsJson     Json?
  conflictAlertsJson Json?
  comparisonDataJson Json?
  status             SimulationStatus   @default(PENDING)
  errorMessage       String?
  executionTime      Int?
  metricsData        Json?
  resultData         Json?
  scenario           SimulationScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@map("simulation_results")
}

model SimulationIntermediateResult {
  scenarioId String
  stepName   String
  data       Json
  hash       String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  scenario   SimulationScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@id([scenarioId, stepName])
  @@map("simulation_intermediate_results")
}

model ContextualMessage {
  id           String              @id @default(cuid())
  content      String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  authorId     Int
  assignmentId String?
  contextDate  DateTime?           @db.Date
  requestId    String?
  parentId     String?
  assignment   Assignment?         @relation("AssignmentContextualMessages", fields: [assignmentId], references: [id], onDelete: Cascade)
  author       User                @relation("AuthoredMessages", fields: [authorId], references: [id], onDelete: Cascade)
  parent       ContextualMessage?  @relation("Thread", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      ContextualMessage[] @relation("Thread")
  request      UserRequest?        @relation("UserRequestContextualMessages", fields: [requestId], references: [id], onDelete: Cascade)

  @@index([assignmentId])
  @@index([contextDate])
  @@index([requestId])
  @@index([authorId])
  @@map("contextual_messages")
}

model NotificationPreference {
  id                         String   @id @default(cuid())
  userId                     Int      @unique
  assignmentReminders        Boolean  @default(true)
  assignmentSwapRequests     Boolean  @default(true)
  assignmentSwapResponses    Boolean  @default(true)
  assignmentSwapAdminActions Boolean  @default(true)
  contextualMessages         Boolean  @default(true)
  mentionsInMessages         Boolean  @default(true)
  planningUpdates            Boolean  @default(true)
  leaveRequestStatusChanges  Boolean  @default(true)
  openShifts                 Boolean  @default(false)
  teamPlanningPublished      Boolean  @default(true)
  emailEnabled               Boolean  @default(true)
  inAppEnabled               Boolean  @default(true)
  pushEnabled                Boolean  @default(false)
  quietHoursEnabled          Boolean  @default(false)
  quietHoursStart            String?  @default("22:00")
  quietHoursEnd              String?  @default("08:00")
  quietHoursDays             String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  user                       User     @relation("UserNotificationPreferences", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

enum ActivityCategory {
  BLOC_OPERATOIRE
  CONSULTATION
  GARDE
  ASTREINTE
  REUNION
  FORMATION
  ADMINISTRATIF
  AUTRE
}

enum Period {
  MATIN
  APRES_MIDI
  JOURNEE_ENTIERE
}

enum BlocPlanningStatus {
  DRAFT
  VALIDATION_REQUESTED
  VALIDATED
  MODIFIED_AFTER_VALIDATION
  LOCKED
  ARCHIVED
}

enum BlocStaffRole {
  MAR
  IADE
}

enum ConflictSeverity {
  WARNING
  ERROR
}

enum RecurrenceTypeTrame {
  AUCUNE
  HEBDOMADAIRE
}

enum TypeSemaineTrame {
  TOUTES
  PAIRES
  IMPAIRES
}

enum TrameRoleType {
  MAR
  IADE
  CHIRURGIEN
  TOUS
}

enum Role {
  ADMIN_TOTAL
  ADMIN_PARTIEL
  USER
}

enum UserStatus {
  ACTIF
  INACTIF
}

enum ProfessionalRole {
  MAR
  IADE
  SECRETAIRE
}

enum WorkPatternType {
  FULL_TIME
  ALTERNATING_WEEKS
  ALTERNATING_MONTHS
  SPECIFIC_DAYS
}

enum WeekType {
  EVEN
  ODD
  ALL
}

enum RuleType {
  LEAVE
  DUTY
  SUPERVISION
  ASSIGNMENT
  ON_CALL
}

enum RulePriority {
  LOW
  WARNING
  HIGH
  CRITICAL
}

enum RuleSeverity {
  ERROR
  WARNING
  INFO
}

enum RotationStrategy {
  ROUND_ROBIN
  LEAST_RECENTLY_ASSIGNED
  BALANCED_LOAD
}

enum LeaveType {
  ANNUAL
  RECOVERY
  TRAINING
  SICK
  MATERNITY
  SPECIAL
  UNPAID
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum DayPeriod {
  MORNING
  AFTERNOON
}

enum TrameType {
  BLOCK
  CONSULTATION
  DUTY
  ON_CALL
}

enum AbsenceType {
  LEAVE
  ILLNESS
  TRAINING
  OTHER
}

enum AbsenceStatus {
  REQUESTED
  VALIDATED
  REJECTED
}

enum IncompatibilityType {
  BLOQUANT
  PREFERENTIEL
}

enum SectorCategory {
  STANDARD
  HYPERASEPTIQUE
  OPHTALMOLOGIE
  ENDOSCOPIE
}

enum RoomType {
  STANDARD
  FIV
  CONSULTATION
}

enum UserRequestStatus {
  SUBMITTED
  IN_PROGRESS
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED_BY_USER
}

enum AssignmentSwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

enum SimulationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum NotificationType {
  NEW_CONTEXTUAL_MESSAGE
  MENTION_IN_MESSAGE
  NEW_PLANNING_COMMENT
  ASSIGNMENT_SWAP_REQUEST_RECEIVED
  ASSIGNMENT_SWAP_REQUEST_ACCEPTED
  ASSIGNMENT_SWAP_REQUEST_REJECTED
  ASSIGNMENT_SWAP_REQUEST_APPROVED_ADMIN
  ASSIGNMENT_SWAP_REQUEST_CANCELLED
  ASSIGNMENT_REMINDER
  PLANNING_UPDATED_IMPACTING_YOU
  LEAVE_REQUEST_STATUS_CHANGED
  NEW_OPEN_SHIFT_AVAILABLE
  TEAM_PLANNING_PUBLISHED
  RULE_CONFLICT_DETECTED_ADMIN
  GENERAL_INFO
  SYSTEM_ALERT
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   Int
  updater     User     @relation("SystemConfigUpdates", fields: [updatedBy], references: [id])

  @@map("system_config")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation("UserActivityLogs", fields: [userId], references: [id])
  action    String
  details   Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

model RulesTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  category      String   // STANDARD, INTENSIF, ALLEGE, PEDIATRIE, CUSTOM
  rules         Json
  fatigueConfig Json
  isDefault     Boolean  @default(false)
  createdBy     Int
  creator       User     @relation("CreatedRulesTemplates", fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([name, isDefault])
  @@index([category])
  @@index([isDefault])
  @@map("rules_templates")
}

model UnifiedRequest {
  id                    String                    @id @default(cuid())
  type                  String                    // LEAVE, ASSIGNMENT_SWAP, EMERGENCY_REPLACEMENT, etc.
  status                String                    @default("draft")
  priority              String                    @default("normal")
  
  // User relations
  requesterId           Int
  requester             User                      @relation("UnifiedRequestRequester", fields: [requesterId], references: [id])
  assignedToId          Int?
  assignedTo            User?                     @relation("UnifiedRequestAssignedTo", fields: [assignedToId], references: [id])
  
  // Request details
  title                 String
  description           String?
  data                  Json                      // Type-specific data
  
  // Workflow
  currentStep           String                    @default("draft")
  workflowHistory       Json                      @default("[]")
  
  // Timestamps
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  submittedAt           DateTime?
  resolvedAt            DateTime?
  
  // Site relation
  siteId                String?
  site                  Site?                     @relation(fields: [siteId], references: [id])
  
  // Notifications
  notifications         UnifiedRequestNotification[]
  
  // Audit
  auditLog              Json                      @default("[]")
  
  // Legacy references for migration
  legacyType            String?                   // Original system type
  legacyId              String?                   // Original record ID
  
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([requesterId])
  @@index([assignedToId])
  @@index([createdAt])
  @@index([siteId])
  @@unique([legacyType, legacyId])
}

model UnifiedRequestNotification {
  id                    String                    @id @default(cuid())
  requestId             String
  request               UnifiedRequest            @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  type                  String                    // EMAIL, IN_APP, SMS
  recipientId           Int
  recipient             User                      @relation(fields: [recipientId], references: [id])
  
  subject               String
  content               String
  status                String                    @default("pending") // pending, sent, failed
  
  sentAt                DateTime?
  failureReason         String?
  
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  
  @@index([requestId])
  @@index([recipientId])
  @@index([status])
}

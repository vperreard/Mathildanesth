generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int              @id @default(autoincrement())
  nom                           String
  prenom                        String
  login                         String           @unique
  email                         String           @unique
  password                      String
  role                          Role
  professionalRole              ProfessionalRole
  tempsPartiel                  Boolean          @default(false)
  pourcentageTempsPartiel       Float?
  dateEntree                    DateTime?
  dateSortie                    DateTime?
  actif                         Boolean          @default(true)
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  mustChangePassword            Boolean          @default(true)
  phoneNumber                   String?
  alias                         String?
  workOnMonthType               WeekType?
  workPattern                   WorkPatternType  @default(FULL_TIME)
  joursTravaillesSemaineImpaire Json             @default("[]")
  joursTravaillesSemainePaire   Json             @default("[]")
  loginLogs                     LoginLog[]
  createdRules                  Rule[]           @relation("CreatedRules")
  updatedRules                  Rule[]           @relation("UpdatedRules")
  surgeonProfile                Surgeon?
  leaves                        Leave[]          // Relation inverse pour les congés
  duties                        Duty[]           // Relation inverse pour les gardes
  onCalls                       OnCall[]         // Relation inverse pour les astreintes
  assignments                   Assignment[]     // Relation inverse pour les affectations
  approvedLeaves                Leave[]          @relation("ApprovedLeaves") // Relation inverse pour les congés approuvés par cet utilisateur
}

model Specialty {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  isPediatric Boolean   @default(false)
  surgeons    Surgeon[] @relation("SpecialtyToSurgeon")
  assignments Assignment[] // Relation inverse pour les affectations
}

model Surgeon {
  id              Int                 @id @default(autoincrement())
  nom             String
  prenom          String
  email           String?             @unique
  phoneNumber     String?
  status          UserStatus          @default(ACTIF)
  userId          Int?                @unique
  googleSheetName String?
  preferences     SurgeonPreference[]
  user            User?               @relation(fields: [userId], references: [id])
  specialties     Specialty[]         @relation("SpecialtyToSurgeon")

  @@map("surgeons")
}

model SurgeonPreference {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  surgeonId Int
  surgeon   Surgeon @relation(fields: [surgeonId], references: [id])

  @@map("preferences")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlanningRule {
  id            Int      @id @default(autoincrement())
  category      String
  name          String
  description   String?
  isActive      Boolean  @default(true)
  priority      Int      @default(1)
  conditionJSON Json
  parameterJSON Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OperatingRoomConfig {
  id               Int      @id @default(autoincrement())
  name             String
  number           String
  sector           String
  colorCode        String?
  isActive         Boolean  @default(true)
  supervisionRules Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Rule {
  id            String         @id @default(uuid())
  name          String
  description   String?
  type          RuleType
  priority      RulePriority   @default(MEDIUM)
  isActive      Boolean        @default(false)
  validFrom     DateTime
  validTo       DateTime?
  configuration Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     Int
  updatedBy     Int?
  createdByUser User           @relation("CreatedRules", fields: [createdBy], references: [id])
  updatedByUser User?          @relation("UpdatedRules", fields: [updatedBy], references: [id])
  conflicts     RuleConflict[] @relation("RuleToConflict")
}

model RuleConflict {
  id                String       @id @default(uuid())
  description       String
  severity          RuleSeverity @default(MEDIUM)
  detectedAt        DateTime     @default(now())
  resolvedAt        DateTime?
  resolution        String?
  resolutionDetails String?
  rules             Rule[]       @relation("RuleToConflict")
}

model Location {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  sector   String?   // Ex: Bloc opératoire, Consultations, etc.
  isActive Boolean   @default(true)
  duties   Duty[]    // Relation avec les gardes
  onCalls  OnCall[]  // Relation avec les astreintes
  assignments Assignment[] // Relation avec les affectations
}

model LeaveTypeSetting {
  id        String   @id @default(cuid())
  code      String   @unique // Code unique interne (ex: ANNUAL, SICK, MATERNITY)
  label     String   // Libellé affiché à l'utilisateur (ex: "Congé annuel")
  description String?  // Description optionnelle

  // Champ JSON pour stocker les règles spécifiques
  // Exemple: { "countingMethod": "WEEKDAYS_ONLY", "applicableToRoles": ["DOCTOR"], "minNoticeDays": 14 }
  rules     Json?

  isActive         Boolean  @default(true) // Peut être désactivé sans le supprimer
  isUserSelectable Boolean  @default(true) // Peut être sélectionné par l'utilisateur dans le formulaire

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leave_type_settings")
}

model Leave {
  id        String    @id @default(cuid())
  userId    Int       // Doit être Int pour correspondre à User.id
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate DateTime // Date de début (stockée en UTC)
  endDate   DateTime // Date de fin (stockée en UTC)

  // Nouveau champ pour le code du type de congé (lien vers LeaveTypeSetting.code)
  typeCode  String
  // Ancien champ - à conserver temporairement pour la migration
  type      LeaveType

  status    LeaveStatus
  reason    String?
  comment   String?   // Commentaire admin lors de l'approbation/rejet

  requestDate   DateTime @default(now()) // Date de la demande
  approvalDate  DateTime? // Date de l'approbation/rejet
  approvedById  Int?      // Doit être Int? pour correspondre à User.id (et optionnel)
  approvedBy    User?     @relation("ApprovedLeaves", fields: [approvedById], references: [id])

  // Nombre de jours décomptés (sera recalculé en fonction des règles de typeCode)
  countedDays   Float // Utiliser Float pour les demi-journées éventuelles

  calculationDetails Json? // Stocker les détails du calcul si nécessaire

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relation vers les conflits (si modélisé)
  // conflicts   LeaveConflict[]

  @@index([userId])
  @@index([startDate, endDate])
  @@index([typeCode]) // Ajouter un index sur le nouveau champ
  @@map("leaves")
}

model Duty {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  date       DateTime  // Date de la garde (souvent une journée entière)
  locationId Int?      // Lieu de la garde (optionnel)
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([date])
  @@index([locationId])
}

model OnCall {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate  DateTime
  endDate    DateTime
  locationId Int?      // Lieu de l'astreinte (optionnel)
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([startDate])
  @@index([endDate])
  @@index([locationId])
}

model Assignment {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime   // Date de l'affectation
  locationId  Int        // Lieu d'affectation
  location    Location   @relation(fields: [locationId], references: [id], onDelete: Restrict) // Affectation doit avoir un lieu
  specialtyId Int?       // Spécialité concernée (optionnel)
  specialty   Specialty? @relation(fields: [specialtyId], references: [id], onDelete: SetNull)
  description String?    // Détails de l'affectation
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([date])
  @@index([locationId])
  @@index([specialtyId])
}

enum Role {
  ADMIN_TOTAL
  ADMIN_PARTIEL
  USER
}

enum UserStatus {
  ACTIF
  INACTIF
}

enum ProfessionalRole {
  MAR
  IADE
  SECRETAIRE
}

enum WorkPatternType {
  FULL_TIME
  ALTERNATING_WEEKS
  ALTERNATING_MONTHS
  SPECIFIC_DAYS
}

enum WeekType {
  EVEN
  ODD
  ALL
}

enum RuleType {
  LEAVE
  DUTY
  SUPERVISION
  ASSIGNMENT
  ON_CALL
}

enum RulePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RuleSeverity {
  LOW
  MEDIUM
  HIGH
}

enum RotationStrategy {
  ROUND_ROBIN
  LEAST_RECENTLY_ASSIGNED
  BALANCED_LOAD
}

enum LeaveType {
  ANNUAL
  RECOVERY
  TRAINING
  SICK
  MATERNITY
  SPECIAL
  UNPAID
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

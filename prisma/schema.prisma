generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int                   @id @default(autoincrement())
  nom                           String
  prenom                        String
  login                         String                @unique
  email                         String                @unique
  password                      String
  role                          Role
  professionalRole              ProfessionalRole
  tempsPartiel                  Boolean               @default(false)
  pourcentageTempsPartiel       Float?
  dateEntree                    DateTime?
  dateSortie                    DateTime?
  actif                         Boolean               @default(true)
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  mustChangePassword            Boolean               @default(true)
  phoneNumber                   String?
  alias                         String?
  workOnMonthType               WeekType?
  workPattern                   WorkPatternType       @default(FULL_TIME)
  joursTravaillesSemaineImpaire Json                  @default("[]")
  joursTravaillesSemainePaire   Json                  @default("[]")
  displayPreferences            Json?
  assignments                   Assignment[]
  duties                        Duty[]
  loginLogs                     LoginLog[]
  onCalls                       OnCall[]
  createdRules                  Rule[]                @relation("CreatedRules")
  updatedRules                  Rule[]                @relation("UpdatedRules")
  approvedLeaves                Leave[]               @relation("ApprovedLeaves")
  leaves                        Leave[]
  surgeonProfile                Surgeon?
  calendarSettings              UserCalendarSettings?
}

model Specialty {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  isPediatric Boolean      @default(false)
  assignments Assignment[]
  surgeons    Surgeon[]    @relation("SpecialtyToSurgeon")
}

model Surgeon {
  id              Int                 @id @default(autoincrement())
  nom             String
  prenom          String
  email           String?             @unique
  phoneNumber     String?
  status          UserStatus          @default(ACTIF)
  userId          Int?                @unique
  googleSheetName String?
  preferences     SurgeonPreference[]
  user            User?               @relation(fields: [userId], references: [id])
  specialties     Specialty[]         @relation("SpecialtyToSurgeon")

  @@map("surgeons")
}

model SurgeonPreference {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  surgeonId Int
  surgeon   Surgeon @relation(fields: [surgeonId], references: [id])

  @@map("preferences")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlanningRule {
  id            Int      @id @default(autoincrement())
  category      String
  name          String
  description   String?
  isActive      Boolean  @default(true)
  priority      Int      @default(1)
  conditionJSON Json
  parameterJSON Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OperatingRoom {
  id               Int             @id @default(autoincrement())
  name             String
  number           String          @unique
  sectorId         Int
  colorCode        String?
  isActive         Boolean         @default(true)
  supervisionRules Json
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  sector           OperatingSector @relation(fields: [sectorId], references: [id])

  @@index([sectorId])
}

model Rule {
  id            String         @id @default(uuid())
  name          String
  description   String?
  type          RuleType
  priority      RulePriority   @default(MEDIUM)
  isActive      Boolean        @default(false)
  validFrom     DateTime
  validTo       DateTime?
  configuration Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     Int
  updatedBy     Int?
  createdByUser User           @relation("CreatedRules", fields: [createdBy], references: [id])
  updatedByUser User?          @relation("UpdatedRules", fields: [updatedBy], references: [id])
  conflicts     RuleConflict[] @relation("RuleToConflict")
}

model RuleConflict {
  id                String       @id @default(uuid())
  description       String
  severity          RuleSeverity @default(MEDIUM)
  detectedAt        DateTime     @default(now())
  resolvedAt        DateTime?
  resolution        String?
  resolutionDetails String?
  rules             Rule[]       @relation("RuleToConflict")
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  sector      String?
  isActive    Boolean      @default(true)
  assignments Assignment[]
  duties      Duty[]
  onCalls     OnCall[]
}

model LeaveTypeSetting {
  id               String   @id @default(cuid())
  code             String   @unique
  label            String
  description      String?
  rules            Json?
  isActive         Boolean  @default(true)
  isUserSelectable Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("leave_type_settings")
}

model Leave {
  id                 String      @id @default(cuid())
  userId             Int
  startDate          DateTime
  endDate            DateTime
  typeCode           String
  type               LeaveType
  status             LeaveStatus
  reason             String?
  comment            String?
  requestDate        DateTime    @default(now())
  approvalDate       DateTime?
  approvedById       Int?
  countedDays        Float
  calculationDetails Json?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  approvedBy         User?       @relation("ApprovedLeaves", fields: [approvedById], references: [id])
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate, endDate])
  @@index([typeCode])
  @@map("leaves")
}

model Duty {
  id         Int       @id @default(autoincrement())
  userId     Int
  date       DateTime
  locationId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  location   Location? @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([locationId])
}

model OnCall {
  id         Int       @id @default(autoincrement())
  userId     Int
  startDate  DateTime
  endDate    DateTime
  locationId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  location   Location? @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate])
  @@index([endDate])
  @@index([locationId])
}

model Assignment {
  id          Int        @id @default(autoincrement())
  userId      Int
  date        DateTime
  locationId  Int
  specialtyId Int?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  location    Location   @relation(fields: [locationId], references: [id])
  specialty   Specialty? @relation(fields: [specialtyId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([locationId])
  @@index([specialtyId])
}

model OperatingSector {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  colorCode      String          @default("#000000")
  isActive       Boolean         @default(true)
  description    String?
  rules          Json            @default("{\"maxRoomsPerSupervisor\": 2}")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  operatingRooms OperatingRoom[]
}

model UserCalendarSettings {
  id                 String   @id @default(cuid())
  userId             Int      @unique
  defaultView        String   @default("month")
  showWeekends       Boolean  @default(true)
  showHolidays       Boolean  @default(true)
  showRejectedLeaves Boolean  @default(false)
  colorScheme        String   @default("default")
  startWeekOn        String   @default("monday")
  timeFormat         String   @default("24h")
  notifications      Json     @default("{\"email\": true, \"sound\": false, \"browser\": true}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@map("user_calendar_settings")
}

model ProfessionalRoleConfig {
  id                 String   @id
  code               String   @unique
  label              String
  description        String?
  isActive           Boolean  @default(true)
  displayPreferences Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model TeamConfiguration {
  id             String    @id @default(cuid())
  name           String
  description    String?
  isDefault      Boolean   @default(false)
  isActive       Boolean   @default(true)
  gardes         Json
  consultations  Json
  bloc           Json
  conges         Json
  fatigue        Json?
  tempsPartiel   Json?
  iades          Json?
  remplacants    Json?
  preferences    Json?
  statistiques   Json?
  horaires       Json?
  affectations   Json?
  transitions    Json?
  equite         Json?
  alertes        Json?
  algorithme     Json?
  rapports       Json?
  audit          Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("team_configurations")
}

enum Role {
  ADMIN_TOTAL
  ADMIN_PARTIEL
  USER
}

enum UserStatus {
  ACTIF
  INACTIF
}

enum ProfessionalRole {
  MAR
  IADE
  SECRETAIRE
}

enum WorkPatternType {
  FULL_TIME
  ALTERNATING_WEEKS
  ALTERNATING_MONTHS
  SPECIFIC_DAYS
}

enum WeekType {
  EVEN
  ODD
  ALL
}

enum RuleType {
  LEAVE
  DUTY
  SUPERVISION
  ASSIGNMENT
  ON_CALL
}

enum RulePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RuleSeverity {
  LOW
  MEDIUM
  HIGH
}

enum RotationStrategy {
  ROUND_ROBIN
  LEAST_RECENTLY_ASSIGNED
  BALANCED_LOAD
}

enum LeaveType {
  ANNUAL
  RECOVERY
  TRAINING
  SICK
  MATERNITY
  SPECIAL
  UNPAID
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

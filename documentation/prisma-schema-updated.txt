// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Nouveaux rôles/niveaux d'accès
enum Role {
  ADMIN_TOTAL // Peut tout faire
  ADMIN_PARTIEL // Peut gérer utilisateurs/planning mais pas la configuration avancée
  USER // Utilisateur standard (MAR/IADE)
}

// Statut des utilisateurs/chirurgiens
enum UserStatus {
  ACTIF
  INACTIF
}

// Rôles professionnels
enum ProfessionalRole {
  MAR
  IADE
  SECRETAIRE
  // Ajouter d'autres rôles si nécessaire
}

// Pattern de travail
enum WorkPatternType {
  FULL_TIME
  ALTERNATING_WEEKS // Semaines paires/impaires
  ALTERNATING_MONTHS // Mois pairs/impairs
  SPECIFIC_DAYS // Jours spécifiques (peut varier selon semaine paire/impaire)
}

enum WeekType {
  EVEN // Paire
  ODD  // Impaire
  ALL  // Toutes
}

// Modèle utilisateur
model User {
  id               Int              @id @default(autoincrement())
  nom              String
  prenom           String
  login            String           @unique
  email            String           @unique
  alias            String?
  phoneNumber      String?
  password         String
  role             Role
  professionalRole ProfessionalRole

  // Infos temps de travail
  tempsPartiel            Boolean   @default(false)
  pourcentageTempsPartiel Float?
  dateEntree              DateTime?
  dateSortie              DateTime?
  actif                   Boolean   @default(true)

  // Configuration du temps de travail
  workPattern             WorkPatternType @default(FULL_TIME)
  workOnMonthType         WeekType? 
  joursTravaillesSemainePaire Json @default("[]")
  joursTravaillesSemaineImpaire Json @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations 
  loginLogs LoginLog[]
  surgeonProfile Surgeon?
  conges Conge[]
  affectations Affectation[]
  compteurs Compteur[]
  notificationsRecues Notification[] @relation("destinataire")
  
  // Force le changement de mot de passe
  mustChangePassword Boolean @default(true)
}

// Modèle pour les spécialités
model Specialty {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  isPediatric Boolean @default(false)

  // Relation Many-to-Many avec Surgeon
  surgeons Surgeon[]
}

// Modèle pour les Chirurgiens
model Surgeon {
  id             Int          @id @default(autoincrement())
  nom            String
  prenom         String
  email          String?      @unique
  phoneNumber    String?
  googleSheetName String?
  status         UserStatus   @default(ACTIF)
  userId         Int?         @unique
  user           User?        @relation(fields: [userId], references: [id])
  specialties    Specialty[]
  preferences    SurgeonPreference[]
  affectations   Affectation[]

  @@map("surgeons")
}

// Préférences des chirurgiens
model SurgeonPreference {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  surgeonId Int
  surgeon   Surgeon @relation(fields: [surgeonId], references: [id])

  @@map("preferences")
}

// Journal des connexions
model LoginLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Modèle pour les affectations (planning)
model Affectation {
  id          Int      @id @default(autoincrement())
  date        DateTime
  periodeJournee String // "matin", "apres-midi", "journee"
  
  // Relations
  utilisateurId Int
  utilisateur   User    @relation(fields: [utilisateurId], references: [id])
  
  salleId      Int?
  salle        Salle?   @relation(fields: [salleId], references: [id])
  
  chirurgienId Int?
  chirurgien   Surgeon? @relation(fields: [chirurgienId], references: [id])
  
  // Propriétés
  type        String // "garde", "astreinte", "consultation", "bloc-anesthesie", "bloc-supervision"
  specialite  String?
  statut      String // "genere", "valide", "manuel"
  exceptionnel Boolean @default(false)
  commentaire String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relation avec Trame (optionnel)
  trameId     Int?
  trame       Trame?   @relation(fields: [trameId], references: [id])
}

// Modèle pour les salles
model Salle {
  id              Int      @id @default(autoincrement())
  nom             String
  numero          String
  type            String // "Chirurgie", "Ophtalmo", "Endoscopie", "Césarienne"
  secteur         String // "Hyperaseptique", "5-8", "9-12B", "Ophtalmo", "Endo"
  codeColor       String?
  reglesSupervision Json?
  actif           Boolean @default(true)
  
  // Relations
  affectations    Affectation[]
}

// Modèle pour les congés
model Conge {
  id              Int      @id @default(autoincrement())
  dateDebut       DateTime
  dateFin         DateTime
  type            String // "CA", "Maladie", "Formation", "Récupération"
  statut          String // "Demandé", "Approuvé", "Refusé"
  commentaire     String?
  decompte        Boolean @default(true)
  justificatif    String?
  
  // Relations
  utilisateurId   Int
  utilisateur     User    @relation(fields: [utilisateurId], references: [id])
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Compteurs (congés, heures, stats)
model Compteur {
  id                  Int      @id @default(autoincrement())
  annee               Int
  congesPris          Int      @default(0)
  congesRestants      Int      @default(0)
  heuresSupplementaires Int    @default(0)
  statsSpecialites    Json?   // JSON pour stocker des statistiques flexibles
  statsGardes         Json?
  
  // Relations
  utilisateurId       Int
  utilisateur         User    @relation(fields: [utilisateurId], references: [id])
  
  @@unique([utilisateurId, annee])
}

// Modèle pour les trames (patterns)
model Trame {
  id                  Int      @id @default(autoincrement())
  nom                 String
  type                String // "Bloc", "Consultation", "Garde"
  configuration       String? // "Semaine paire/impaire"
  dateDebutValidite   DateTime?
  dateFinValidite     DateTime?
  details             Json?
  
  // Relations
  affectations        Affectation[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Modèle pour les notifications
model Notification {
  id                  Int      @id @default(autoincrement())
  message             String
  type                String // "Validation congé", "Refus congé", "Nouveau planning", "Demande changement"
  lue                 Boolean @default(false)
  priorite            Int     @default(0)
  actionRequise       String?
  
  // Relations
  destinataireId      Int
  destinataire        User    @relation("destinataire", fields: [destinataireId], references: [id])
  
  // Référence optionnelle vers d'autres entités
  affectationId       Int?
  congeId             Int?
  
  createdAt           DateTime @default(now())
}

// Nouveau modèle pour les règles de planification
model PlanningRule {
  id              Int      @id @default(autoincrement())
  category        String   // "GARDE", "CONSULTATION", "BLOC", "SUPERVISION"
  name            String
  description     String?
  isActive        Boolean  @default(true)
  priority        Int      @default(1) // Priorité en cas de conflit entre règles
  conditionJSON   Json     // Conditions d'application (format JSON)
  parameterJSON   Json     // Paramètres de la règle (format JSON)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Nouveau modèle pour la configuration des salles opératoires
model OperatingRoomConfig {
  id              Int      @id @default(autoincrement())
  name            String
  number          String   // Numéro (e.g., "1", "10", "Ophta 3")
  sector          String   // "Hyperaseptique", "5-8", "9-12B", "Ophtalmo", "Endo"
  colorCode       String?  // Code couleur pour l'UI
  isActive        Boolean  @default(true)
  supervisionRules Json    // Règles spécifiques de supervision pour cette salle
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}